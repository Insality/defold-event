[
    {
        "DOC": "/Users/insality/code/defold/defold-event/.",
        "defines": [],
        "fields": [],
        "name": "LuaLS",
        "type": "luals.config"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nA global variable (not a function) that holds the global environment (see [ยง2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                    "finish": 700007,
                    "rawdesc": "\nA global variable (not a function) that holds the global environment (see [ยง2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
                    "start": 700005,
                    "type": "table",
                    "view": "_G"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 700002,
                "start": 700000,
                "type": "setglobal"
            }
        ],
        "desc": "\nA global variable (not a function) that holds the global environment (see [ยง2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
        "name": "_G",
        "rawdesc": "\nA global variable (not a function) that holds the global environment (see [ยง2.2](command:extension.lua.doc?[\"en-us/54/manual.html/2.2\"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_G\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
                    "finish": 4040020,
                    "rawdesc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
                    "start": 4040011,
                    "type": "string",
                    "view": "string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4040008,
                "start": 4040000,
                "type": "setglobal"
            }
        ],
        "desc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
        "name": "_VERSION",
        "rawdesc": "\nA global variable (not a function) that holds a string containing the running Lua version.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-_VERSION\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
                    "finish": 80008,
                    "rawdesc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
                    "start": 80006,
                    "type": "table",
                    "view": "string[]"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 80003,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
        "name": "arg",
        "rawdesc": "\nCommand-line arguments of Lua Standalone.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-arg\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 210017,
                            "name": "v",
                            "start": 210016,
                            "type": "local",
                            "view": "<T>?"
                        },
                        {
                            "finish": 210026,
                            "name": "message",
                            "start": 210019,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 210031,
                            "start": 210028,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                    "finish": 210036,
                    "rawdesc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 210000,
                    "type": "function",
                    "view": "function assert(v?: <T>, message?: any, ...any)\n  -> <T>\n  2. ...any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 210015,
                "start": 210009,
                "type": "setglobal"
            }
        ],
        "desc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
        "name": "assert",
        "rawdesc": "\nRaises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `\"assertion failed!\"`\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-assert\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 410027,
                            "name": "opt",
                            "start": 410024,
                            "type": "local",
                            "view": "(\"collect\"|\"count\"|\"generational\"|\"incremental\"|\"isrunning\"...(+3))?"
                        },
                        {
                            "finish": 410032,
                            "start": 410029,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                    "finish": 410037,
                    "rawdesc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 410000,
                    "type": "function",
                    "view": "function collectgarbage(opt?: \"collect\"|\"count\"|\"generational\"|\"incremental\"|\"isrunning\"...(+3), ...any)\n  -> any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 410023,
                "start": 410009,
                "type": "setglobal"
            }
        ],
        "desc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
        "name": "collectgarbage",
        "rawdesc": "\nThis function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-collectgarbage\"])\n\n\n```lua\nopt:\n   -> \"collect\" -- Performs a full garbage-collection cycle.\n    | \"stop\" -- Stops automatic execution.\n    | \"restart\" -- Restarts automatic execution.\n    | \"count\" -- Returns the total memory in Kbytes.\n    | \"step\" -- Performs a garbage-collection step.\n    | \"isrunning\" -- Returns whether the collector is running.\n    | \"incremental\" -- Change the collector mode to incremental.\n    | \"generational\" -- Change the collector mode to generational.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                    "finish": 80014,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
                    "start": 80012,
                    "type": "table",
                    "view": "coroutinelib"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 80009,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
        "name": "coroutine",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 390027,
                            "name": "co",
                            "start": 390025,
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "finish": 390032,
                    "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
                    "returns": [
                        {
                            "name": "noerror",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errorobject",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 390000,
                    "type": "function",
                    "view": "function coroutine.close(co: thread)\n  -> noerror: boolean\n  2. errorobject: any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 390024,
                "start": 390009,
                "type": "setfield"
            }
        ],
        "desc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
        "name": "coroutine.close",
        "rawdesc": "\nCloses coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.close\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 180027,
                            "name": "f",
                            "start": 180026,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "finish": 180032,
                    "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "thread"
                        }
                    ],
                    "start": 180000,
                    "type": "function",
                    "view": "function coroutine.create(f: fun(...any):...unknown)\n  -> thread"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 180025,
                "start": 180009,
                "type": "setfield"
            }
        ],
        "desc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
        "name": "coroutine.create",
        "rawdesc": "\nCreates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `\"thread\"`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.create\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 280033,
                            "name": "co",
                            "start": 280031,
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "finish": 280038,
                    "rawdesc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 280000,
                    "type": "function",
                    "view": "function coroutine.isyieldable(co?: thread)\n  -> boolean"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 280030,
                "start": 280009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
        "name": "coroutine.isyieldable",
        "rawdesc": "\nReturns true when the coroutine `co` can yield. The default for `co` is the running coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.isyieldable\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 500028,
                            "name": "co",
                            "start": 500026,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 500034,
                            "name": "val1",
                            "start": 500030,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 500039,
                            "start": 500036,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "finish": 500044,
                    "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 500000,
                    "type": "function",
                    "view": "function coroutine.resume(co: thread, val1?: any, ...any)\n  -> success: boolean\n  2. ...any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 500025,
                "start": 500009,
                "type": "setfield"
            }
        ],
        "desc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
        "name": "coroutine.resume",
        "rawdesc": "\nStarts or continues the execution of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.resume\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "finish": 600032,
                    "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
                    "returns": [
                        {
                            "name": "running",
                            "type": "function.return",
                            "view": "thread"
                        },
                        {
                            "name": "ismain",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 600000,
                    "type": "function",
                    "view": "function coroutine.running()\n  -> running: thread\n  2. ismain: boolean"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 600026,
                "start": 600009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
        "name": "coroutine.running",
        "rawdesc": "\nReturns the running coroutine plus a boolean, true when the running coroutine is the main one.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.running\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 740028,
                            "name": "co",
                            "start": 740026,
                            "type": "local",
                            "view": "thread"
                        }
                    ],
                    "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "finish": 740033,
                    "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"dead\"|\"normal\"|\"running\"|\"suspended\""
                        }
                    ],
                    "start": 740000,
                    "type": "function",
                    "view": "function coroutine.status(co: thread)\n  -> \"dead\"|\"normal\"|\"running\"|\"suspended\""
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 740025,
                "start": 740009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
        "name": "coroutine.status",
        "rawdesc": "\nReturns the status of coroutine `co`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.status\"])\n\n\n```lua\nreturn #1:\n    | \"running\" -- Is running.\n    | \"suspended\" -- Is suspended or not started.\n    | \"normal\" -- Is active but not running.\n    | \"dead\" -- Has finished or stopped with an error.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 840025,
                            "name": "f",
                            "start": 840024,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "finish": 840030,
                    "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(...any):...unknown"
                        }
                    ],
                    "start": 840000,
                    "type": "function",
                    "view": "function coroutine.wrap(f: fun(...any):...unknown)\n  -> fun(...any):...unknown"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 840023,
                "start": 840009,
                "type": "setfield"
            }
        ],
        "desc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
        "name": "coroutine.wrap",
        "rawdesc": "\nCreates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.wrap\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 930028,
                            "start": 930025,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "async": true,
                    "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "finish": 930033,
                    "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 930000,
                    "type": "function",
                    "view": "(async) function coroutine.yield(...any)\n  -> ...any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua",
                "finish": 930024,
                "start": 930009,
                "type": "setfield"
            }
        ],
        "desc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
        "name": "coroutine.yield",
        "rawdesc": "\nSuspends the execution of the calling coroutine.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-coroutine.yield\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                    "finish": 80010,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
                    "start": 80008,
                    "type": "table",
                    "view": "debuglib"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 80005,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
        "name": "debug",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "finish": 330026,
                    "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
                    "start": 330000,
                    "type": "function",
                    "view": "function debug.debug()"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 330020,
                "start": 330009,
                "type": "setfield"
            }
        ],
        "desc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
        "name": "debug.debug",
        "rawdesc": "\nEnters an interactive mode with the user, running each string that the user enters.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.debug\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 440024,
                            "name": "o",
                            "start": 440023,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "finish": 440029,
                    "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 440000,
                    "type": "function",
                    "view": "function debug.getfenv(o: any)\n  -> table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 440022,
                "start": 440009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
        "name": "debug.getfenv",
        "rawdesc": "\nReturns the environment of object `o` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getfenv\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 560025,
                            "name": "co",
                            "start": 560023,
                            "type": "local",
                            "view": "thread?"
                        }
                    ],
                    "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "finish": 560030,
                    "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
                    "returns": [
                        {
                            "name": "hook",
                            "type": "function.return",
                            "view": "function"
                        },
                        {
                            "name": "mask",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 560000,
                    "type": "function",
                    "view": "function debug.gethook(co?: thread)\n  -> hook: function\n  2. mask: string\n  3. count: integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 560022,
                "start": 560009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
        "name": "debug.gethook",
        "rawdesc": "\nReturns the current hook settings of the thread.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.gethook\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 790029,
                            "name": "thread",
                            "start": 790023,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 790032,
                            "name": "f",
                            "start": 790031,
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": 790038,
                            "name": "what",
                            "start": 790034,
                            "type": "local",
                            "view": "(string|\"L\"|\"S\"|\"f\"|\"l\"...(+4))?"
                        }
                    ],
                    "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                    "finish": 790043,
                    "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "debuginfo"
                        }
                    ],
                    "start": 790000,
                    "type": "function",
                    "view": "function debug.getinfo(thread: thread, f: integer|fun(...any):...unknown, what?: string|\"L\"|\"S\"|\"f\"|\"l\"...(+4))\n  -> debuginfo"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 790022,
                "start": 790009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
        "name": "debug.getinfo",
        "rawdesc": "\nReturns a table with information about a function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getinfo\"])\n\n\n---\n\n```lua\nwhat:\n   +> \"n\" -- `name` and `namewhat`\n   +> \"S\" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`\n   +> \"l\" -- `currentline`\n   +> \"t\" -- `istailcall`\n   +> \"u\" -- `nups`, `nparams`, and `isvararg`\n   +> \"f\" -- `func`\n   +> \"r\" -- `ftransfer` and `ntransfer`\n   +> \"L\" -- `activelines`\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 930030,
                            "name": "thread",
                            "start": 930024,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 930033,
                            "name": "f",
                            "start": 930032,
                            "type": "local",
                            "view": "integer|fun(...any):...unknown"
                        },
                        {
                            "finish": 930040,
                            "name": "index",
                            "start": 930035,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "finish": 930045,
                    "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 930000,
                    "type": "function",
                    "view": "function debug.getlocal(thread: thread, f: integer|fun(...any):...unknown, index: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 930023,
                "start": 930009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
        "name": "debug.getlocal",
        "rawdesc": "\nReturns the name and the value of the local variable with index `local` of the function at level `f` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getlocal\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1030034,
                            "name": "object",
                            "start": 1030028,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "finish": 1030039,
                    "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 1030000,
                    "type": "function",
                    "view": "function debug.getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1030027,
                "start": 1030009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
        "name": "debug.getmetatable",
        "rawdesc": "\nReturns the metatable of the given value.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getmetatable\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "finish": 1120032,
                    "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 1120000,
                    "type": "function",
                    "view": "function debug.getregistry()\n  -> table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1120026,
                "start": 1120009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
        "name": "debug.getregistry",
        "rawdesc": "\nReturns the registry table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getregistry\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1240027,
                            "name": "f",
                            "start": 1240026,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 1240031,
                            "name": "up",
                            "start": 1240029,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "finish": 1240036,
                    "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1240000,
                    "type": "function",
                    "view": "function debug.getupvalue(f: fun(...any):...unknown, up: integer)\n  -> name: string\n  2. value: any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1240025,
                "start": 1240009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
        "name": "debug.getupvalue",
        "rawdesc": "\nReturns the name and the value of the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getupvalue\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1390029,
                            "name": "u",
                            "start": 1390028,
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": 1390032,
                            "name": "n",
                            "start": 1390031,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "finish": 1390037,
                    "rawdesc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 1390000,
                    "type": "function",
                    "view": "function debug.getuservalue(u: userdata, n?: integer)\n  -> any\n  2. boolean"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1390027,
                "start": 1390009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
        "name": "debug.getuservalue",
        "rawdesc": "\nReturns the `n`-th user value associated\nto the userdata `u` plus a boolean,\n`false` if the userdata does not have that value.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.getuservalue\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1540035,
                            "name": "limit",
                            "start": 1540030,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "deprecated": true,
                    "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "finish": 1540040,
                    "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean|integer"
                        }
                    ],
                    "start": 1540000,
                    "type": "function",
                    "view": "function debug.setcstacklimit(limit: integer)\n  -> boolean|integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1540029,
                "start": 1540009,
                "type": "setfield"
            }
        ],
        "desc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
        "name": "debug.setcstacklimit",
        "rawdesc": "\n### **Deprecated in `Lua 5.4.2`**\n\nSets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.\n\nIn case of success, this function returns the old limit. In case of error, it returns `false`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setcstacklimit\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1660029,
                            "name": "object",
                            "start": 1660023,
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": 1660034,
                            "name": "env",
                            "start": 1660031,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "finish": 1660039,
                    "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
                    "returns": [
                        {
                            "name": "object",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 1660000,
                    "type": "function",
                    "view": "function debug.setfenv(object: <T>, env: table)\n  -> object: <T>"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1660022,
                "start": 1660009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
        "name": "debug.setfenv",
        "rawdesc": "\nSets the environment of the given `object` to the given `table` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setfenv\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1850029,
                            "name": "thread",
                            "start": 1850023,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 1850035,
                            "name": "hook",
                            "start": 1850031,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 1850041,
                            "name": "mask",
                            "start": 1850037,
                            "type": "local",
                            "view": "string|\"c\"|\"l\"|\"r\""
                        },
                        {
                            "finish": 1850048,
                            "name": "count",
                            "start": 1850043,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "finish": 1850053,
                    "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
                    "start": 1850000,
                    "type": "function",
                    "view": "function debug.sethook(thread: thread, hook: fun(...any):...unknown, mask: string|\"c\"|\"l\"|\"r\", count?: integer)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1850022,
                "start": 1850009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
        "name": "debug.sethook",
        "rawdesc": "\nSets the given function as a hook.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.sethook\"])\n\n\n---\n\n```lua\nmask:\n   +> \"c\" -- Calls hook when Lua calls a function.\n   +> \"r\" -- Calls hook when Lua returns from a function.\n   +> \"l\" -- Calls hook when Lua enters a new line of code.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1980030,
                            "name": "thread",
                            "start": 1980024,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 1980037,
                            "name": "level",
                            "start": 1980032,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 1980044,
                            "name": "index",
                            "start": 1980039,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 1980051,
                            "name": "value",
                            "start": 1980046,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "finish": 1980056,
                    "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1980000,
                    "type": "function",
                    "view": "function debug.setlocal(thread: thread, level: integer, index: integer, value: any)\n  -> name: string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 1980023,
                "start": 1980009,
                "type": "setfield"
            }
        ],
        "desc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
        "name": "debug.setlocal",
        "rawdesc": "\nAssigns the `value` to the local variable with index `local` of the function at `level` of the stack.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setlocal\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2090033,
                            "name": "value",
                            "start": 2090028,
                            "type": "local",
                            "view": "<T>"
                        },
                        {
                            "finish": 2090039,
                            "name": "meta",
                            "start": 2090035,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "finish": 2090044,
                    "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
                    "returns": [
                        {
                            "name": "value",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 2090000,
                    "type": "function",
                    "view": "function debug.setmetatable(value: <T>, meta?: table)\n  -> value: <T>"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2090027,
                "start": 2090009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
        "name": "debug.setmetatable",
        "rawdesc": "\nSets the metatable for the given value to the given table (which can be `nil`).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setmetatable\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2200027,
                            "name": "f",
                            "start": 2200026,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2200031,
                            "name": "up",
                            "start": 2200029,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 2200038,
                            "name": "value",
                            "start": 2200033,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "finish": 2200043,
                    "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
                    "returns": [
                        {
                            "name": "name",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2200000,
                    "type": "function",
                    "view": "function debug.setupvalue(f: fun(...any):...unknown, up: integer, value: any)\n  -> name: string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2200025,
                "start": 2200009,
                "type": "setfield"
            }
        ],
        "desc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
        "name": "debug.setupvalue",
        "rawdesc": "\nAssigns the `value` to the upvalue with index `up` of the function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setupvalue\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2340033,
                            "name": "udata",
                            "start": 2340028,
                            "type": "local",
                            "view": "userdata"
                        },
                        {
                            "finish": 2340040,
                            "name": "value",
                            "start": 2340035,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2340043,
                            "name": "n",
                            "start": 2340042,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "finish": 2340048,
                    "rawdesc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
                    "returns": [
                        {
                            "name": "udata",
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": 2340000,
                    "type": "function",
                    "view": "function debug.setuservalue(udata: userdata, value: any, n?: integer)\n  -> udata: userdata"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2340027,
                "start": 2340009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
        "name": "debug.setuservalue",
        "rawdesc": "\nSets the given `value` as\nthe `n`-th user value associated to the given `udata`.\n`udata` must be a full userdata.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.setuservalue\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2470031,
                            "name": "thread",
                            "start": 2470025,
                            "type": "local",
                            "view": "thread"
                        },
                        {
                            "finish": 2470040,
                            "name": "message",
                            "start": 2470033,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2470047,
                            "name": "level",
                            "start": 2470042,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "finish": 2470052,
                    "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
                    "returns": [
                        {
                            "name": "message",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2470000,
                    "type": "function",
                    "view": "function debug.traceback(thread: thread, message?: any, level?: integer)\n  -> message: string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2470024,
                "start": 2470009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
        "name": "debug.traceback",
        "rawdesc": "\nReturns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.traceback\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2590026,
                            "name": "f",
                            "start": 2590025,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2590029,
                            "name": "n",
                            "start": 2590028,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "finish": 2590034,
                    "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
                    "returns": [
                        {
                            "name": "id",
                            "type": "function.return",
                            "view": "lightuserdata"
                        }
                    ],
                    "start": 2590000,
                    "type": "function",
                    "view": "function debug.upvalueid(f: fun(...any):...unknown, n: integer)\n  -> id: lightuserdata"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2590024,
                "start": 2590009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
        "name": "debug.upvalueid",
        "rawdesc": "\nReturns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvalueid\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2710029,
                            "name": "f1",
                            "start": 2710027,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2710033,
                            "name": "n1",
                            "start": 2710031,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 2710037,
                            "name": "f2",
                            "start": 2710035,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2710041,
                            "name": "n2",
                            "start": 2710039,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "finish": 2710046,
                    "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
                    "start": 2710000,
                    "type": "function",
                    "view": "function debug.upvaluejoin(f1: fun(...any):...unknown, n1: integer, f2: fun(...any):...unknown, n2: integer)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/debug.lua",
                "finish": 2710026,
                "start": 2710009,
                "type": "setfield"
            }
        ],
        "desc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
        "name": "debug.upvaluejoin",
        "rawdesc": "\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-debug.upvaluejoin\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 500024,
                            "name": "filename",
                            "start": 500016,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                    "finish": 500029,
                    "rawdesc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 500000,
                    "type": "function",
                    "view": "function dofile(filename?: string)\n  -> ...any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 500015,
                "start": 500009,
                "type": "setglobal"
            }
        ],
        "desc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
        "name": "dofile",
        "rawdesc": "\nOpens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-dofile\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 620022,
                            "name": "message",
                            "start": 620015,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 620029,
                            "name": "level",
                            "start": 620024,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                    "finish": 620034,
                    "rawdesc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
                    "start": 620000,
                    "type": "function",
                    "view": "function error(message: any, level?: integer)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 620014,
                "start": 620009,
                "type": "setglobal"
            }
        ],
        "desc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
        "name": "error",
        "rawdesc": "\nTerminates the last protected function called and returns message as the error object.\n\nUsually, `error` adds some information about the error position at the beginning of the message, if the message is a string.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-error\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 130015,
                "start": 130010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": "Mapping of callbacks to their source code location. Used for memory allocation warnings.",
                "extends": {
                    "finish": 150048,
                    "start": 150027,
                    "type": "doc.type",
                    "types": [
                        {
                            "finish": 150048,
                            "start": 150027,
                            "type": "doc.type.sign",
                            "view": "table<string, string>"
                        }
                    ],
                    "view": "table<string, string>"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 150048,
                "name": "_mapping",
                "rawdesc": "Mapping of callbacks to their source code location. Used for memory allocation warnings.",
                "start": 150010,
                "type": "doc.field",
                "visible": "private"
            },
            {
                "desc": "Clear all subscribed callbacks.",
                "extends": {
                    "args": [
                        {
                            "finish": 2520008,
                            "name": "self",
                            "start": 2520008,
                            "type": "self",
                            "view": "event"
                        }
                    ],
                    "desc": "Clear all subscribed callbacks.",
                    "finish": 2560003,
                    "rawdesc": "Clear all subscribed callbacks.",
                    "start": 2520000,
                    "type": "function",
                    "view": "(method) event:clear()"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 2520016,
                "name": "clear",
                "rawdesc": "Clear all subscribed callbacks.",
                "start": 2520009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Create new event instance. If callback is passed, it will be subscribed to the event.\n\n@*param* `callback` โ The function to be called when the event is triggered. It will trigger the event if it is an event.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. Not used if the callback is an event.\n\n@*return* `A` โ new event instance.",
                "extends": {
                    "args": [
                        {
                            "desc": "The function to be called when the event is triggered. It will trigger the event if it is an event.",
                            "finish": 810026,
                            "name": "callback",
                            "rawdesc": "The function to be called when the event is triggered. It will trigger the event if it is an event.",
                            "start": 810018,
                            "type": "local",
                            "view": "function|event|nil"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function. Not used if the callback is an event.",
                            "finish": 810044,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function. Not used if the callback is an event.",
                            "start": 810028,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Create new event instance. If callback is passed, it will be subscribed to the event.\n\n@*param* `callback` โ The function to be called when the event is triggered. It will trigger the event if it is an event.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. Not used if the callback is an event.\n\n@*return* `A` โ new event instance.",
                    "finish": 890003,
                    "rawdesc": "Create new event instance. If callback is passed, it will be subscribed to the event.",
                    "returns": [
                        {
                            "desc": "new event instance.",
                            "name": "A",
                            "rawdesc": "new event instance.",
                            "type": "function.return",
                            "view": "event"
                        }
                    ],
                    "start": 810000,
                    "type": "function",
                    "view": "function event.create(callback: function|event|nil, callback_context: any)\n  -> A: event"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 810017,
                "name": "create",
                "rawdesc": "Create new event instance. If callback is passed, it will be subscribed to the event.",
                "start": 810009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Check if the event has any subscribed callbacks.\n\n@*return* `True` โ if the event has any subscribed callbacks",
                "extends": {
                    "args": [
                        {
                            "finish": 2460008,
                            "name": "self",
                            "start": 2460008,
                            "type": "self",
                            "view": "event"
                        }
                    ],
                    "desc": "Check if the event has any subscribed callbacks.\n\n@*return* `True` โ if the event has any subscribed callbacks",
                    "finish": 2480003,
                    "rawdesc": "Check if the event has any subscribed callbacks.",
                    "returns": [
                        {
                            "desc": "if the event has any subscribed callbacks",
                            "name": "True",
                            "rawdesc": "if the event has any subscribed callbacks",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 2460000,
                    "type": "function",
                    "view": "(method) event:is_empty()\n  -> True: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 2460019,
                "name": "is_empty",
                "rawdesc": "Check if the event has any subscribed callbacks.",
                "start": 2460009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Check if the callback is subscribed to the event.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the event\n\n@*return* `index` โ Index of callback in event if subscribed (return first found index)",
                "extends": {
                    "args": [
                        {
                            "finish": 1530008,
                            "name": "self",
                            "start": 1530008,
                            "type": "self",
                            "view": "event"
                        },
                        {
                            "desc": "The callback function in question.",
                            "finish": 1530033,
                            "name": "callback",
                            "rawdesc": "The callback function in question.",
                            "start": 1530025,
                            "type": "local",
                            "view": "function|event"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 1530051,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 1530035,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Check if the callback is subscribed to the event.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the event\n\n@*return* `index` โ Index of callback in event if subscribed (return first found index)",
                    "finish": 1730003,
                    "rawdesc": "Check if the callback is subscribed to the event.",
                    "returns": [
                        {
                            "desc": "True if the callback is subscribed to the event",
                            "name": "is_subscribed",
                            "rawdesc": "True if the callback is subscribed to the event",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "Index of callback in event if subscribed (return first found index)",
                            "name": "index",
                            "rawdesc": "Index of callback in event if subscribed (return first found index)",
                            "type": "function.return",
                            "view": "number|nil"
                        }
                    ],
                    "start": 1530000,
                    "type": "function",
                    "view": "(method) event:is_subscribed(callback: function|event, callback_context: any)\n  -> is_subscribed: boolean\n  2. index: number|nil"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 1530024,
                "name": "is_subscribed",
                "rawdesc": "Check if the callback is subscribed to the event.",
                "start": 1530009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 520001,
                    "start": 420011,
                    "type": "table",
                    "view": "event.logger"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 420008,
                "name": "logger",
                "start": 420000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Customize the logging mechanism used by Event module. You can use **Defold Log** library or provide a custom logger. By default, the module uses the `pprint` logger for errors.\n\n@*param* `logger_instance` โ A logger object that follows the specified logging interface, including methods for `trace`, `debug`, `info`, `warn`, `error`. Pass `nil` to remove the default logger.",
                "extends": {
                    "args": [
                        {
                            "desc": "A logger object that follows the specified logging interface, including methods for `trace`, `debug`, `info`, `warn`, `error`. Pass `nil` to remove the default logger.",
                            "finish": 580037,
                            "name": "logger_instance",
                            "rawdesc": "A logger object that follows the specified logging interface, including methods for `trace`, `debug`, `info`, `warn`, `error`. Pass `nil` to remove the default logger.",
                            "start": 580022,
                            "type": "local",
                            "view": "table|event.logger|nil"
                        }
                    ],
                    "desc": "Customize the logging mechanism used by Event module. You can use **Defold Log** library or provide a custom logger. By default, the module uses the `pprint` logger for errors.\n\n@*param* `logger_instance` โ A logger object that follows the specified logging interface, including methods for `trace`, `debug`, `info`, `warn`, `error`. Pass `nil` to remove the default logger.",
                    "finish": 600003,
                    "rawdesc": "Customize the logging mechanism used by Event module. You can use **Defold Log** library or provide a custom logger. By default, the module uses the `pprint` logger for errors.",
                    "start": 580000,
                    "type": "function",
                    "view": "function event.set_logger(logger_instance: table|event.logger|nil)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 580021,
                "name": "set_logger",
                "rawdesc": "Customize the logging mechanism used by Event module. You can use **Defold Log** library or provide a custom logger. By default, the module uses the `pprint` logger for errors.",
                "start": 580009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Set the threshold for logging warnings about memory allocations in event callbacks. Works only in debug builds. The threshold is in kilobytes. If the callback causes a memory allocation greater than the threshold, a warning will be logged.\n\n@*param* `value` โ Threshold in kilobytes for logging warnings about memory allocations. `0` disables tracking.",
                "extends": {
                    "args": [
                        {
                            "desc": "Threshold in kilobytes for logging warnings about memory allocations. `0` disables tracking.",
                            "finish": 670037,
                            "name": "value",
                            "rawdesc": "Threshold in kilobytes for logging warnings about memory allocations. `0` disables tracking.",
                            "start": 670032,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "Set the threshold for logging warnings about memory allocations in event callbacks. Works only in debug builds. The threshold is in kilobytes. If the callback causes a memory allocation greater than the threshold, a warning will be logged.\n\n@*param* `value` โ Threshold in kilobytes for logging warnings about memory allocations. `0` disables tracking.",
                    "finish": 720003,
                    "rawdesc": "Set the threshold for logging warnings about memory allocations in event callbacks. Works only in debug builds. The threshold is in kilobytes. If the callback causes a memory allocation greater than the threshold, a warning will be logged.",
                    "start": 670000,
                    "type": "function",
                    "view": "function event.set_memory_threshold(value: number)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 670031,
                "name": "set_memory_threshold",
                "rawdesc": "Set the threshold for logging warnings about memory allocations in event callbacks. Works only in debug builds. The threshold is in kilobytes. If the callback causes a memory allocation greater than the threshold, a warning will be logged.",
                "start": 670009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Subscribe to the event. If the callback is already subscribed, it will not be added again.\n\n@*param* `callback` โ The function to be executed when the event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. Not used if the callback is an event.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if the callback is already subscribed)",
                "extends": {
                    "args": [
                        {
                            "finish": 960008,
                            "name": "self",
                            "start": 960008,
                            "type": "self",
                            "view": "event"
                        },
                        {
                            "desc": "The function to be executed when the event occurs.",
                            "finish": 960029,
                            "name": "callback",
                            "rawdesc": "The function to be executed when the event occurs.",
                            "start": 960021,
                            "type": "local",
                            "view": "function|event"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function. Not used if the callback is an event.",
                            "finish": 960047,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function. Not used if the callback is an event.",
                            "start": 960031,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Subscribe to the event. If the callback is already subscribed, it will not be added again.\n\n@*param* `callback` โ The function to be executed when the event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. Not used if the callback is an event.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if the callback is already subscribed)",
                    "finish": 1180003,
                    "rawdesc": "Subscribe to the event. If the callback is already subscribed, it will not be added again.",
                    "returns": [
                        {
                            "desc": "True if event is subscribed (Will return false if the callback is already subscribed)",
                            "name": "is_subscribed",
                            "rawdesc": "True if event is subscribed (Will return false if the callback is already subscribed)",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 960000,
                    "type": "function",
                    "view": "(method) event:subscribe(callback: function|event, callback_context: any)\n  -> is_subscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 960020,
                "name": "subscribe",
                "rawdesc": "Subscribe to the event. If the callback is already subscribed, it will not be added again.",
                "start": 960009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Trigger the event and call all subscribed callbacks. Returns the result of the last callback. If no callbacks are subscribed, nothing will happen.\n\n@*return* `result` โ Result of the last triggered callback",
                "extends": {
                    "args": [
                        {
                            "finish": 1790008,
                            "name": "self",
                            "start": 1790008,
                            "type": "self",
                            "view": "event"
                        },
                        {
                            "finish": 1790022,
                            "start": 1790019,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "Trigger the event and call all subscribed callbacks. Returns the result of the last callback. If no callbacks are subscribed, nothing will happen.\n\n@*return* `result` โ Result of the last triggered callback",
                    "finish": 2410003,
                    "rawdesc": "Trigger the event and call all subscribed callbacks. Returns the result of the last callback. If no callbacks are subscribed, nothing will happen.",
                    "returns": [
                        {
                            "desc": "Result of the last triggered callback",
                            "name": "result",
                            "rawdesc": "Result of the last triggered callback",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1790000,
                    "type": "function",
                    "view": "(method) event:trigger(...any)\n  -> result: any"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 1790018,
                "name": "trigger",
                "rawdesc": "Trigger the event and call all subscribed callbacks. Returns the result of the last callback. If no callbacks are subscribed, nothing will happen.",
                "start": 1790009,
                "type": "setmethod",
                "visible": "public"
            },
            {
                "desc": "Unsubscribe from the event. If the callback is not subscribed, nothing will happen.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. Not used if the callback is an event. If context is nil it will unsubscribe all callbacks with the same function.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                "extends": {
                    "args": [
                        {
                            "finish": 1250008,
                            "name": "self",
                            "start": 1250008,
                            "type": "self",
                            "view": "event"
                        },
                        {
                            "desc": "The callback function to unsubscribe.",
                            "finish": 1250031,
                            "name": "callback",
                            "rawdesc": "The callback function to unsubscribe.",
                            "start": 1250023,
                            "type": "local",
                            "view": "function|event"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function. Not used if the callback is an event. If context is nil it will unsubscribe all callbacks with the same function.",
                            "finish": 1250049,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function. Not used if the callback is an event. If context is nil it will unsubscribe all callbacks with the same function.",
                            "start": 1250033,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Unsubscribe from the event. If the callback is not subscribed, nothing will happen.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. Not used if the callback is an event. If context is nil it will unsubscribe all callbacks with the same function.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                    "finish": 1450003,
                    "rawdesc": "Unsubscribe from the event. If the callback is not subscribed, nothing will happen.",
                    "returns": [
                        {
                            "desc": "True if event is unsubscribed",
                            "name": "is_unsubscribed",
                            "rawdesc": "True if event is unsubscribed",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 1250000,
                    "type": "function",
                    "view": "(method) event:unsubscribe(callback: function|event, callback_context: any)\n  -> is_unsubscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 1250022,
                "name": "unsubscribe",
                "rawdesc": "Unsubscribe from the event. If the callback is not subscribed, nothing will happen.",
                "start": 1250009,
                "type": "setmethod",
                "visible": "public"
            }
        ],
        "name": "event",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": [
                    {
                        "finish": 40036,
                        "start": 40031,
                        "type": "doc.extends.name",
                        "view": "table"
                    }
                ],
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 40036,
                "start": 40010,
                "type": "doc.class"
            }
        ],
        "desc": "Contains each item[1] - callback, item[2] - callback_context, item[3] - script_context",
        "fields": [],
        "name": "event.callback_data",
        "rawdesc": "Contains each item[1] - callback, item[2] - callback_context, item[3] - script_context",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 60022,
                "start": 60010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": "Log a debug message.",
                "extends": {
                    "finish": 80073,
                    "start": 80016,
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": 80040,
                                    "name": {
                                        "[1]": "logger",
                                        "finish": 80026,
                                        "start": 80020,
                                        "type": "doc.type.arg.name",
                                        "view": "logger"
                                    },
                                    "start": 80020,
                                    "type": "doc.type.arg",
                                    "view": "event.logger"
                                },
                                {
                                    "finish": 80057,
                                    "name": {
                                        "[1]": "message",
                                        "finish": 80049,
                                        "start": 80042,
                                        "type": "doc.type.arg.name",
                                        "view": "message"
                                    },
                                    "start": 80042,
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": 80072,
                                    "name": {
                                        "[1]": "data",
                                        "finish": 80063,
                                        "start": 80059,
                                        "type": "doc.type.arg.name",
                                        "view": "data"
                                    },
                                    "start": 80059,
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": 80073,
                            "returns": {
                                "view": "unknown"
                            },
                            "start": 80016,
                            "type": "doc.type.function",
                            "view": "fun(logger: event.logger, message: string, data: any)"
                        }
                    ],
                    "view": "fun(logger: event.logger, message: string, data: any)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 80073,
                "name": "debug",
                "rawdesc": "Log a debug message.",
                "start": 80010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Log an error message.",
                "extends": {
                    "finish": 110073,
                    "start": 110016,
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": 110040,
                                    "name": {
                                        "[1]": "logger",
                                        "finish": 110026,
                                        "start": 110020,
                                        "type": "doc.type.arg.name",
                                        "view": "logger"
                                    },
                                    "start": 110020,
                                    "type": "doc.type.arg",
                                    "view": "event.logger"
                                },
                                {
                                    "finish": 110057,
                                    "name": {
                                        "[1]": "message",
                                        "finish": 110049,
                                        "start": 110042,
                                        "type": "doc.type.arg.name",
                                        "view": "message"
                                    },
                                    "start": 110042,
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": 110072,
                                    "name": {
                                        "[1]": "data",
                                        "finish": 110063,
                                        "start": 110059,
                                        "type": "doc.type.arg.name",
                                        "view": "data"
                                    },
                                    "start": 110059,
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": 110073,
                            "returns": {
                                "view": "unknown"
                            },
                            "start": 110016,
                            "type": "doc.type.function",
                            "view": "fun(logger: event.logger, message: string, data: any)"
                        }
                    ],
                    "view": "fun(logger: event.logger, message: string, data: any)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 110073,
                "name": "error",
                "rawdesc": "Log an error message.",
                "start": 110010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Log an info message.",
                "extends": {
                    "finish": 90072,
                    "start": 90015,
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": 90039,
                                    "name": {
                                        "[1]": "logger",
                                        "finish": 90025,
                                        "start": 90019,
                                        "type": "doc.type.arg.name",
                                        "view": "logger"
                                    },
                                    "start": 90019,
                                    "type": "doc.type.arg",
                                    "view": "event.logger"
                                },
                                {
                                    "finish": 90056,
                                    "name": {
                                        "[1]": "message",
                                        "finish": 90048,
                                        "start": 90041,
                                        "type": "doc.type.arg.name",
                                        "view": "message"
                                    },
                                    "start": 90041,
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": 90071,
                                    "name": {
                                        "[1]": "data",
                                        "finish": 90062,
                                        "start": 90058,
                                        "type": "doc.type.arg.name",
                                        "view": "data"
                                    },
                                    "start": 90058,
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": 90072,
                            "returns": {
                                "view": "unknown"
                            },
                            "start": 90015,
                            "type": "doc.type.function",
                            "view": "fun(logger: event.logger, message: string, data: any)"
                        }
                    ],
                    "view": "fun(logger: event.logger, message: string, data: any)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 90072,
                "name": "info",
                "rawdesc": "Log an info message.",
                "start": 90010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Log a trace message.",
                "extends": {
                    "finish": 70073,
                    "start": 70016,
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": 70040,
                                    "name": {
                                        "[1]": "logger",
                                        "finish": 70026,
                                        "start": 70020,
                                        "type": "doc.type.arg.name",
                                        "view": "logger"
                                    },
                                    "start": 70020,
                                    "type": "doc.type.arg",
                                    "view": "event.logger"
                                },
                                {
                                    "finish": 70057,
                                    "name": {
                                        "[1]": "message",
                                        "finish": 70049,
                                        "start": 70042,
                                        "type": "doc.type.arg.name",
                                        "view": "message"
                                    },
                                    "start": 70042,
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": 70072,
                                    "name": {
                                        "[1]": "data",
                                        "finish": 70063,
                                        "start": 70059,
                                        "type": "doc.type.arg.name",
                                        "view": "data"
                                    },
                                    "start": 70059,
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": 70073,
                            "returns": {
                                "view": "unknown"
                            },
                            "start": 70016,
                            "type": "doc.type.function",
                            "view": "fun(logger: event.logger, message: string, data: any)"
                        }
                    ],
                    "view": "fun(logger: event.logger, message: string, data: any)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 70073,
                "name": "trace",
                "rawdesc": "Log a trace message.",
                "start": 70010,
                "type": "doc.field",
                "visible": "public"
            },
            {
                "desc": "Log a warning message.",
                "extends": {
                    "finish": 100072,
                    "start": 100015,
                    "type": "doc.type",
                    "types": [
                        {
                            "args": [
                                {
                                    "finish": 100039,
                                    "name": {
                                        "[1]": "logger",
                                        "finish": 100025,
                                        "start": 100019,
                                        "type": "doc.type.arg.name",
                                        "view": "logger"
                                    },
                                    "start": 100019,
                                    "type": "doc.type.arg",
                                    "view": "event.logger"
                                },
                                {
                                    "finish": 100056,
                                    "name": {
                                        "[1]": "message",
                                        "finish": 100048,
                                        "start": 100041,
                                        "type": "doc.type.arg.name",
                                        "view": "message"
                                    },
                                    "start": 100041,
                                    "type": "doc.type.arg",
                                    "view": "string"
                                },
                                {
                                    "finish": 100071,
                                    "name": {
                                        "[1]": "data",
                                        "finish": 100062,
                                        "start": 100058,
                                        "type": "doc.type.arg.name",
                                        "view": "data"
                                    },
                                    "start": 100058,
                                    "type": "doc.type.arg",
                                    "view": "any"
                                }
                            ],
                            "finish": 100072,
                            "returns": {
                                "view": "unknown"
                            },
                            "start": 100015,
                            "type": "doc.type.function",
                            "view": "fun(logger: event.logger, message: string, data: any)"
                        }
                    ],
                    "view": "fun(logger: event.logger, message: string, data: any)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/event.lua",
                "finish": 100072,
                "name": "warn",
                "rawdesc": "Log a warning message.",
                "start": 100010,
                "type": "doc.field",
                "visible": "public"
            }
        ],
        "name": "event.logger",
        "type": "type"
    },
    {
        "defines": [
            {
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 20016,
                "start": 20010,
                "type": "doc.class"
            }
        ],
        "fields": [
            {
                "desc": "Remove all callbacks subscribed to the specified global event.\n\n@*param* `name` โ The name of the global event to clear.",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to clear.",
                            "finish": 230021,
                            "name": "name",
                            "rawdesc": "The name of the global event to clear.",
                            "start": 230017,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Remove all callbacks subscribed to the specified global event.\n\n@*param* `name` โ The name of the global event to clear.",
                    "finish": 250003,
                    "rawdesc": "Remove all callbacks subscribed to the specified global event.",
                    "start": 230000,
                    "type": "function",
                    "view": "function events.clear(name: string)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 230016,
                "name": "clear",
                "rawdesc": "Remove all callbacks subscribed to the specified global event.",
                "start": 230009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove all callbacks subscribed to the specified global event.\n\n@*param* `name` โ The name of the global event to clear.",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to clear.",
                            "finish": 230021,
                            "name": "name",
                            "rawdesc": "The name of the global event to clear.",
                            "start": 230017,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Remove all callbacks subscribed to the specified global event.\n\n@*param* `name` โ The name of the global event to clear.",
                    "finish": 250003,
                    "rawdesc": "Remove all callbacks subscribed to the specified global event.",
                    "start": 230000,
                    "type": "function",
                    "view": "function events.clear(name: string)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 230016,
                "name": "clear",
                "rawdesc": "Remove all callbacks subscribed to the specified global event.",
                "start": 230009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove all callbacks subscribed to the specified global event.\n\n@*param* `name` โ The name of the global event to clear.",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to clear.",
                            "finish": 230021,
                            "name": "name",
                            "rawdesc": "The name of the global event to clear.",
                            "start": 230017,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Remove all callbacks subscribed to the specified global event.\n\n@*param* `name` โ The name of the global event to clear.",
                    "finish": 250003,
                    "rawdesc": "Remove all callbacks subscribed to the specified global event.",
                    "start": 230000,
                    "type": "function",
                    "view": "function events.clear(name: string)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 230016,
                "name": "clear",
                "rawdesc": "Remove all callbacks subscribed to the specified global event.",
                "start": 230009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove all callbacks subscribed to the specified global event.\n\n@*param* `name` โ The name of the global event to clear.",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to clear.",
                            "finish": 230021,
                            "name": "name",
                            "rawdesc": "The name of the global event to clear.",
                            "start": 230017,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Remove all callbacks subscribed to the specified global event.\n\n@*param* `name` โ The name of the global event to clear.",
                    "finish": 250003,
                    "rawdesc": "Remove all callbacks subscribed to the specified global event.",
                    "start": 230000,
                    "type": "function",
                    "view": "function events.clear(name: string)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 230016,
                "name": "clear",
                "rawdesc": "Remove all callbacks subscribed to the specified global event.",
                "start": 230009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove all callbacks subscribed to the specified global event.\n\n@*param* `name` โ The name of the global event to clear.",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to clear.",
                            "finish": 230021,
                            "name": "name",
                            "rawdesc": "The name of the global event to clear.",
                            "start": 230017,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Remove all callbacks subscribed to the specified global event.\n\n@*param* `name` โ The name of the global event to clear.",
                    "finish": 250003,
                    "rawdesc": "Remove all callbacks subscribed to the specified global event.",
                    "start": 230000,
                    "type": "function",
                    "view": "function events.clear(name: string)"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 230016,
                "name": "clear",
                "rawdesc": "Remove all callbacks subscribed to the specified global event.",
                "start": 230009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove all callbacks subscribed to all global events.",
                "extends": {
                    "args": [],
                    "desc": "Remove all callbacks subscribed to all global events.",
                    "finish": 310003,
                    "rawdesc": "Remove all callbacks subscribed to all global events.",
                    "start": 290000,
                    "type": "function",
                    "view": "function events.clear_all()"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 290020,
                "name": "clear_all",
                "rawdesc": "Remove all callbacks subscribed to all global events.",
                "start": 290009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove all callbacks subscribed to all global events.",
                "extends": {
                    "args": [],
                    "desc": "Remove all callbacks subscribed to all global events.",
                    "finish": 310003,
                    "rawdesc": "Remove all callbacks subscribed to all global events.",
                    "start": 290000,
                    "type": "function",
                    "view": "function events.clear_all()"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 290020,
                "name": "clear_all",
                "rawdesc": "Remove all callbacks subscribed to all global events.",
                "start": 290009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove all callbacks subscribed to all global events.",
                "extends": {
                    "args": [],
                    "desc": "Remove all callbacks subscribed to all global events.",
                    "finish": 310003,
                    "rawdesc": "Remove all callbacks subscribed to all global events.",
                    "start": 290000,
                    "type": "function",
                    "view": "function events.clear_all()"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 290020,
                "name": "clear_all",
                "rawdesc": "Remove all callbacks subscribed to all global events.",
                "start": 290009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove all callbacks subscribed to all global events.",
                "extends": {
                    "args": [],
                    "desc": "Remove all callbacks subscribed to all global events.",
                    "finish": 310003,
                    "rawdesc": "Remove all callbacks subscribed to all global events.",
                    "start": 290000,
                    "type": "function",
                    "view": "function events.clear_all()"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 290020,
                "name": "clear_all",
                "rawdesc": "Remove all callbacks subscribed to all global events.",
                "start": 290009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove all callbacks subscribed to all global events.",
                "extends": {
                    "args": [],
                    "desc": "Remove all callbacks subscribed to all global events.",
                    "finish": 310003,
                    "rawdesc": "Remove all callbacks subscribed to all global events.",
                    "start": 290000,
                    "type": "function",
                    "view": "function events.clear_all()"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 290020,
                "name": "clear_all",
                "rawdesc": "Remove all callbacks subscribed to all global events.",
                "start": 290009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 60013,
                    "start": 60011,
                    "type": "table",
                    "view": "{ [string]: event }"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 60008,
                "name": "events",
                "start": 60000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 60013,
                    "start": 60011,
                    "type": "table",
                    "view": "{ [string]: event }"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 60008,
                "name": "events",
                "start": 60000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 60013,
                    "start": 60011,
                    "type": "table",
                    "view": "{ [string]: event }"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 60008,
                "name": "events",
                "start": 60000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 60013,
                    "start": 60011,
                    "type": "table",
                    "view": "{ [string]: event }"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 60008,
                "name": "events",
                "start": 60000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "extends": {
                    "finish": 60013,
                    "start": 60011,
                    "type": "table",
                    "view": "{ [string]: event }"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 60008,
                "name": "events",
                "start": 60000,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Check if the specified global event has no subscribed callbacks.\n\n@*param* `event_name` โ The name of the global event to check.\n\n@*return* `is_empty` โ True if the global event has no subscribed callbacks",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to check.",
                            "finish": 780030,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to check.",
                            "start": 780020,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Check if the specified global event has no subscribed callbacks.\n\n@*param* `event_name` โ The name of the global event to check.\n\n@*return* `is_empty` โ True if the global event has no subscribed callbacks",
                    "finish": 840003,
                    "rawdesc": "Check if the specified global event has no subscribed callbacks.",
                    "returns": [
                        {
                            "desc": "True if the global event has no subscribed callbacks",
                            "name": "is_empty",
                            "rawdesc": "True if the global event has no subscribed callbacks",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 780000,
                    "type": "function",
                    "view": "function events.is_empty(event_name: string)\n  -> is_empty: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 780019,
                "name": "is_empty",
                "rawdesc": "Check if the specified global event has no subscribed callbacks.",
                "start": 780009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Check if the specified global event has no subscribed callbacks.\n\n@*param* `event_name` โ The name of the global event to check.\n\n@*return* `is_empty` โ True if the global event has no subscribed callbacks",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to check.",
                            "finish": 780030,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to check.",
                            "start": 780020,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Check if the specified global event has no subscribed callbacks.\n\n@*param* `event_name` โ The name of the global event to check.\n\n@*return* `is_empty` โ True if the global event has no subscribed callbacks",
                    "finish": 840003,
                    "rawdesc": "Check if the specified global event has no subscribed callbacks.",
                    "returns": [
                        {
                            "desc": "True if the global event has no subscribed callbacks",
                            "name": "is_empty",
                            "rawdesc": "True if the global event has no subscribed callbacks",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 780000,
                    "type": "function",
                    "view": "function events.is_empty(event_name: string)\n  -> is_empty: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 780019,
                "name": "is_empty",
                "rawdesc": "Check if the specified global event has no subscribed callbacks.",
                "start": 780009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Check if the specified global event has no subscribed callbacks.\n\n@*param* `event_name` โ The name of the global event to check.\n\n@*return* `is_empty` โ True if the global event has no subscribed callbacks",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to check.",
                            "finish": 780030,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to check.",
                            "start": 780020,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Check if the specified global event has no subscribed callbacks.\n\n@*param* `event_name` โ The name of the global event to check.\n\n@*return* `is_empty` โ True if the global event has no subscribed callbacks",
                    "finish": 840003,
                    "rawdesc": "Check if the specified global event has no subscribed callbacks.",
                    "returns": [
                        {
                            "desc": "True if the global event has no subscribed callbacks",
                            "name": "is_empty",
                            "rawdesc": "True if the global event has no subscribed callbacks",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 780000,
                    "type": "function",
                    "view": "function events.is_empty(event_name: string)\n  -> is_empty: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 780019,
                "name": "is_empty",
                "rawdesc": "Check if the specified global event has no subscribed callbacks.",
                "start": 780009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Check if the specified global event has no subscribed callbacks.\n\n@*param* `event_name` โ The name of the global event to check.\n\n@*return* `is_empty` โ True if the global event has no subscribed callbacks",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to check.",
                            "finish": 780030,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to check.",
                            "start": 780020,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Check if the specified global event has no subscribed callbacks.\n\n@*param* `event_name` โ The name of the global event to check.\n\n@*return* `is_empty` โ True if the global event has no subscribed callbacks",
                    "finish": 840003,
                    "rawdesc": "Check if the specified global event has no subscribed callbacks.",
                    "returns": [
                        {
                            "desc": "True if the global event has no subscribed callbacks",
                            "name": "is_empty",
                            "rawdesc": "True if the global event has no subscribed callbacks",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 780000,
                    "type": "function",
                    "view": "function events.is_empty(event_name: string)\n  -> is_empty: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 780019,
                "name": "is_empty",
                "rawdesc": "Check if the specified global event has no subscribed callbacks.",
                "start": 780009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Check if the specified global event has no subscribed callbacks.\n\n@*param* `event_name` โ The name of the global event to check.\n\n@*return* `is_empty` โ True if the global event has no subscribed callbacks",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to check.",
                            "finish": 780030,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to check.",
                            "start": 780020,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "Check if the specified global event has no subscribed callbacks.\n\n@*param* `event_name` โ The name of the global event to check.\n\n@*return* `is_empty` โ True if the global event has no subscribed callbacks",
                    "finish": 840003,
                    "rawdesc": "Check if the specified global event has no subscribed callbacks.",
                    "returns": [
                        {
                            "desc": "True if the global event has no subscribed callbacks",
                            "name": "is_empty",
                            "rawdesc": "True if the global event has no subscribed callbacks",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 780000,
                    "type": "function",
                    "view": "function events.is_empty(event_name: string)\n  -> is_empty: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 780019,
                "name": "is_empty",
                "rawdesc": "Check if the specified global event has no subscribed callbacks.",
                "start": 780009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Determine if a specific callback is currently subscribed to the specified global event.\n\n@*param* `event_name` โ The name of the global event in question.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the global event\n\n@*return* `index` โ Index of callback in event if subscribed",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event in question.",
                            "finish": 660035,
                            "name": "event_name",
                            "rawdesc": "The name of the global event in question.",
                            "start": 660025,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function in question.",
                            "finish": 660045,
                            "name": "callback",
                            "rawdesc": "The callback function in question.",
                            "start": 660037,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 660063,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 660047,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Determine if a specific callback is currently subscribed to the specified global event.\n\n@*param* `event_name` โ The name of the global event in question.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the global event\n\n@*return* `index` โ Index of callback in event if subscribed",
                    "finish": 720003,
                    "rawdesc": "Determine if a specific callback is currently subscribed to the specified global event.",
                    "returns": [
                        {
                            "desc": "True if the callback is subscribed to the global event",
                            "name": "is_subscribed",
                            "rawdesc": "True if the callback is subscribed to the global event",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "Index of callback in event if subscribed",
                            "name": "index",
                            "rawdesc": "Index of callback in event if subscribed",
                            "type": "function.return",
                            "view": "number|nil"
                        }
                    ],
                    "start": 660000,
                    "type": "function",
                    "view": "function events.is_subscribed(event_name: string, callback: function, callback_context: any)\n  -> is_subscribed: boolean\n  2. index: number|nil"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 660024,
                "name": "is_subscribed",
                "rawdesc": "Determine if a specific callback is currently subscribed to the specified global event.",
                "start": 660009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Determine if a specific callback is currently subscribed to the specified global event.\n\n@*param* `event_name` โ The name of the global event in question.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the global event\n\n@*return* `index` โ Index of callback in event if subscribed",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event in question.",
                            "finish": 660035,
                            "name": "event_name",
                            "rawdesc": "The name of the global event in question.",
                            "start": 660025,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function in question.",
                            "finish": 660045,
                            "name": "callback",
                            "rawdesc": "The callback function in question.",
                            "start": 660037,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 660063,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 660047,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Determine if a specific callback is currently subscribed to the specified global event.\n\n@*param* `event_name` โ The name of the global event in question.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the global event\n\n@*return* `index` โ Index of callback in event if subscribed",
                    "finish": 720003,
                    "rawdesc": "Determine if a specific callback is currently subscribed to the specified global event.",
                    "returns": [
                        {
                            "desc": "True if the callback is subscribed to the global event",
                            "name": "is_subscribed",
                            "rawdesc": "True if the callback is subscribed to the global event",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "Index of callback in event if subscribed",
                            "name": "index",
                            "rawdesc": "Index of callback in event if subscribed",
                            "type": "function.return",
                            "view": "number|nil"
                        }
                    ],
                    "start": 660000,
                    "type": "function",
                    "view": "function events.is_subscribed(event_name: string, callback: function, callback_context: any)\n  -> is_subscribed: boolean\n  2. index: number|nil"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 660024,
                "name": "is_subscribed",
                "rawdesc": "Determine if a specific callback is currently subscribed to the specified global event.",
                "start": 660009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Determine if a specific callback is currently subscribed to the specified global event.\n\n@*param* `event_name` โ The name of the global event in question.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the global event\n\n@*return* `index` โ Index of callback in event if subscribed",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event in question.",
                            "finish": 660035,
                            "name": "event_name",
                            "rawdesc": "The name of the global event in question.",
                            "start": 660025,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function in question.",
                            "finish": 660045,
                            "name": "callback",
                            "rawdesc": "The callback function in question.",
                            "start": 660037,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 660063,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 660047,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Determine if a specific callback is currently subscribed to the specified global event.\n\n@*param* `event_name` โ The name of the global event in question.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the global event\n\n@*return* `index` โ Index of callback in event if subscribed",
                    "finish": 720003,
                    "rawdesc": "Determine if a specific callback is currently subscribed to the specified global event.",
                    "returns": [
                        {
                            "desc": "True if the callback is subscribed to the global event",
                            "name": "is_subscribed",
                            "rawdesc": "True if the callback is subscribed to the global event",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "Index of callback in event if subscribed",
                            "name": "index",
                            "rawdesc": "Index of callback in event if subscribed",
                            "type": "function.return",
                            "view": "number|nil"
                        }
                    ],
                    "start": 660000,
                    "type": "function",
                    "view": "function events.is_subscribed(event_name: string, callback: function, callback_context: any)\n  -> is_subscribed: boolean\n  2. index: number|nil"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 660024,
                "name": "is_subscribed",
                "rawdesc": "Determine if a specific callback is currently subscribed to the specified global event.",
                "start": 660009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Determine if a specific callback is currently subscribed to the specified global event.\n\n@*param* `event_name` โ The name of the global event in question.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the global event\n\n@*return* `index` โ Index of callback in event if subscribed",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event in question.",
                            "finish": 660035,
                            "name": "event_name",
                            "rawdesc": "The name of the global event in question.",
                            "start": 660025,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function in question.",
                            "finish": 660045,
                            "name": "callback",
                            "rawdesc": "The callback function in question.",
                            "start": 660037,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 660063,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 660047,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Determine if a specific callback is currently subscribed to the specified global event.\n\n@*param* `event_name` โ The name of the global event in question.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the global event\n\n@*return* `index` โ Index of callback in event if subscribed",
                    "finish": 720003,
                    "rawdesc": "Determine if a specific callback is currently subscribed to the specified global event.",
                    "returns": [
                        {
                            "desc": "True if the callback is subscribed to the global event",
                            "name": "is_subscribed",
                            "rawdesc": "True if the callback is subscribed to the global event",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "Index of callback in event if subscribed",
                            "name": "index",
                            "rawdesc": "Index of callback in event if subscribed",
                            "type": "function.return",
                            "view": "number|nil"
                        }
                    ],
                    "start": 660000,
                    "type": "function",
                    "view": "function events.is_subscribed(event_name: string, callback: function, callback_context: any)\n  -> is_subscribed: boolean\n  2. index: number|nil"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 660024,
                "name": "is_subscribed",
                "rawdesc": "Determine if a specific callback is currently subscribed to the specified global event.",
                "start": 660009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Determine if a specific callback is currently subscribed to the specified global event.\n\n@*param* `event_name` โ The name of the global event in question.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the global event\n\n@*return* `index` โ Index of callback in event if subscribed",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event in question.",
                            "finish": 660035,
                            "name": "event_name",
                            "rawdesc": "The name of the global event in question.",
                            "start": 660025,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function in question.",
                            "finish": 660045,
                            "name": "callback",
                            "rawdesc": "The callback function in question.",
                            "start": 660037,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 660063,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 660047,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Determine if a specific callback is currently subscribed to the specified global event.\n\n@*param* `event_name` โ The name of the global event in question.\n\n@*param* `callback` โ The callback function in question.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if the callback is subscribed to the global event\n\n@*return* `index` โ Index of callback in event if subscribed",
                    "finish": 720003,
                    "rawdesc": "Determine if a specific callback is currently subscribed to the specified global event.",
                    "returns": [
                        {
                            "desc": "True if the callback is subscribed to the global event",
                            "name": "is_subscribed",
                            "rawdesc": "True if the callback is subscribed to the global event",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "desc": "Index of callback in event if subscribed",
                            "name": "index",
                            "rawdesc": "Index of callback in event if subscribed",
                            "type": "function.return",
                            "view": "number|nil"
                        }
                    ],
                    "start": 660000,
                    "type": "function",
                    "view": "function events.is_subscribed(event_name: string, callback: function, callback_context: any)\n  -> is_subscribed: boolean\n  2. index: number|nil"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 660024,
                "name": "is_subscribed",
                "rawdesc": "Determine if a specific callback is currently subscribed to the specified global event.",
                "start": 660009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Subscribe a callback to the specified global event.\n\n@*param* `event_name` โ The name of the global event to subscribe to.\n\n@*param* `callback` โ The callback function to be executed when the global event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if callback is already subscribed)",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to subscribe to.",
                            "finish": 390031,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to subscribe to.",
                            "start": 390021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function to be executed when the global event occurs.",
                            "finish": 390041,
                            "name": "callback",
                            "rawdesc": "The callback function to be executed when the global event occurs.",
                            "start": 390033,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 390059,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 390043,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Subscribe a callback to the specified global event.\n\n@*param* `event_name` โ The name of the global event to subscribe to.\n\n@*param* `callback` โ The callback function to be executed when the global event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if callback is already subscribed)",
                    "finish": 430003,
                    "rawdesc": "Subscribe a callback to the specified global event.",
                    "returns": [
                        {
                            "desc": "True if event is subscribed (Will return false if callback is already subscribed)",
                            "name": "is_subscribed",
                            "rawdesc": "True if event is subscribed (Will return false if callback is already subscribed)",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 390000,
                    "type": "function",
                    "view": "function events.subscribe(event_name: string, callback: function, callback_context: any)\n  -> is_subscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 390020,
                "name": "subscribe",
                "rawdesc": "Subscribe a callback to the specified global event.",
                "start": 390009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Subscribe a callback to the specified global event.\n\n@*param* `event_name` โ The name of the global event to subscribe to.\n\n@*param* `callback` โ The callback function to be executed when the global event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if callback is already subscribed)",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to subscribe to.",
                            "finish": 390031,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to subscribe to.",
                            "start": 390021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function to be executed when the global event occurs.",
                            "finish": 390041,
                            "name": "callback",
                            "rawdesc": "The callback function to be executed when the global event occurs.",
                            "start": 390033,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 390059,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 390043,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Subscribe a callback to the specified global event.\n\n@*param* `event_name` โ The name of the global event to subscribe to.\n\n@*param* `callback` โ The callback function to be executed when the global event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if callback is already subscribed)",
                    "finish": 430003,
                    "rawdesc": "Subscribe a callback to the specified global event.",
                    "returns": [
                        {
                            "desc": "True if event is subscribed (Will return false if callback is already subscribed)",
                            "name": "is_subscribed",
                            "rawdesc": "True if event is subscribed (Will return false if callback is already subscribed)",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 390000,
                    "type": "function",
                    "view": "function events.subscribe(event_name: string, callback: function, callback_context: any)\n  -> is_subscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 390020,
                "name": "subscribe",
                "rawdesc": "Subscribe a callback to the specified global event.",
                "start": 390009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Subscribe a callback to the specified global event.\n\n@*param* `event_name` โ The name of the global event to subscribe to.\n\n@*param* `callback` โ The callback function to be executed when the global event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if callback is already subscribed)",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to subscribe to.",
                            "finish": 390031,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to subscribe to.",
                            "start": 390021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function to be executed when the global event occurs.",
                            "finish": 390041,
                            "name": "callback",
                            "rawdesc": "The callback function to be executed when the global event occurs.",
                            "start": 390033,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 390059,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 390043,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Subscribe a callback to the specified global event.\n\n@*param* `event_name` โ The name of the global event to subscribe to.\n\n@*param* `callback` โ The callback function to be executed when the global event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if callback is already subscribed)",
                    "finish": 430003,
                    "rawdesc": "Subscribe a callback to the specified global event.",
                    "returns": [
                        {
                            "desc": "True if event is subscribed (Will return false if callback is already subscribed)",
                            "name": "is_subscribed",
                            "rawdesc": "True if event is subscribed (Will return false if callback is already subscribed)",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 390000,
                    "type": "function",
                    "view": "function events.subscribe(event_name: string, callback: function, callback_context: any)\n  -> is_subscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 390020,
                "name": "subscribe",
                "rawdesc": "Subscribe a callback to the specified global event.",
                "start": 390009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Subscribe a callback to the specified global event.\n\n@*param* `event_name` โ The name of the global event to subscribe to.\n\n@*param* `callback` โ The callback function to be executed when the global event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if callback is already subscribed)",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to subscribe to.",
                            "finish": 390031,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to subscribe to.",
                            "start": 390021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function to be executed when the global event occurs.",
                            "finish": 390041,
                            "name": "callback",
                            "rawdesc": "The callback function to be executed when the global event occurs.",
                            "start": 390033,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 390059,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 390043,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Subscribe a callback to the specified global event.\n\n@*param* `event_name` โ The name of the global event to subscribe to.\n\n@*param* `callback` โ The callback function to be executed when the global event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if callback is already subscribed)",
                    "finish": 430003,
                    "rawdesc": "Subscribe a callback to the specified global event.",
                    "returns": [
                        {
                            "desc": "True if event is subscribed (Will return false if callback is already subscribed)",
                            "name": "is_subscribed",
                            "rawdesc": "True if event is subscribed (Will return false if callback is already subscribed)",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 390000,
                    "type": "function",
                    "view": "function events.subscribe(event_name: string, callback: function, callback_context: any)\n  -> is_subscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 390020,
                "name": "subscribe",
                "rawdesc": "Subscribe a callback to the specified global event.",
                "start": 390009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Subscribe a callback to the specified global event.\n\n@*param* `event_name` โ The name of the global event to subscribe to.\n\n@*param* `callback` โ The callback function to be executed when the global event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if callback is already subscribed)",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to subscribe to.",
                            "finish": 390031,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to subscribe to.",
                            "start": 390021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function to be executed when the global event occurs.",
                            "finish": 390041,
                            "name": "callback",
                            "rawdesc": "The callback function to be executed when the global event occurs.",
                            "start": 390033,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function.",
                            "finish": 390059,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function.",
                            "start": 390043,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Subscribe a callback to the specified global event.\n\n@*param* `event_name` โ The name of the global event to subscribe to.\n\n@*param* `callback` โ The callback function to be executed when the global event occurs.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function.\n\n@*return* `is_subscribed` โ True if event is subscribed (Will return false if callback is already subscribed)",
                    "finish": 430003,
                    "rawdesc": "Subscribe a callback to the specified global event.",
                    "returns": [
                        {
                            "desc": "True if event is subscribed (Will return false if callback is already subscribed)",
                            "name": "is_subscribed",
                            "rawdesc": "True if event is subscribed (Will return false if callback is already subscribed)",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 390000,
                    "type": "function",
                    "view": "function events.subscribe(event_name: string, callback: function, callback_context: any)\n  -> is_subscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 390020,
                "name": "subscribe",
                "rawdesc": "Subscribe a callback to the specified global event.",
                "start": 390009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Throw a global event with the specified name. All subscribed callbacks will be executed.\n\n@*param* `event_name` โ The name of the global event to trigger.\n\n@*return* `result` โ Result of the last triggered callback",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to trigger.",
                            "finish": 130029,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to trigger.",
                            "start": 130019,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 130034,
                            "start": 130031,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "Throw a global event with the specified name. All subscribed callbacks will be executed.\n\n@*param* `event_name` โ The name of the global event to trigger.\n\n@*return* `result` โ Result of the last triggered callback",
                    "finish": 180003,
                    "rawdesc": "Throw a global event with the specified name. All subscribed callbacks will be executed.",
                    "returns": [
                        {
                            "desc": "Result of the last triggered callback",
                            "name": "result",
                            "rawdesc": "Result of the last triggered callback",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 130000,
                    "type": "function",
                    "view": "function events.trigger(event_name: string, ...any)\n  -> result: any"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 130018,
                "name": "trigger",
                "rawdesc": "Throw a global event with the specified name. All subscribed callbacks will be executed.",
                "start": 130009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Throw a global event with the specified name. All subscribed callbacks will be executed.\n\n@*param* `event_name` โ The name of the global event to trigger.\n\n@*return* `result` โ Result of the last triggered callback",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to trigger.",
                            "finish": 130029,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to trigger.",
                            "start": 130019,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 130034,
                            "start": 130031,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "Throw a global event with the specified name. All subscribed callbacks will be executed.\n\n@*param* `event_name` โ The name of the global event to trigger.\n\n@*return* `result` โ Result of the last triggered callback",
                    "finish": 180003,
                    "rawdesc": "Throw a global event with the specified name. All subscribed callbacks will be executed.",
                    "returns": [
                        {
                            "desc": "Result of the last triggered callback",
                            "name": "result",
                            "rawdesc": "Result of the last triggered callback",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 130000,
                    "type": "function",
                    "view": "function events.trigger(event_name: string, ...any)\n  -> result: any"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 130018,
                "name": "trigger",
                "rawdesc": "Throw a global event with the specified name. All subscribed callbacks will be executed.",
                "start": 130009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Throw a global event with the specified name. All subscribed callbacks will be executed.\n\n@*param* `event_name` โ The name of the global event to trigger.\n\n@*return* `result` โ Result of the last triggered callback",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to trigger.",
                            "finish": 130029,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to trigger.",
                            "start": 130019,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 130034,
                            "start": 130031,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "Throw a global event with the specified name. All subscribed callbacks will be executed.\n\n@*param* `event_name` โ The name of the global event to trigger.\n\n@*return* `result` โ Result of the last triggered callback",
                    "finish": 180003,
                    "rawdesc": "Throw a global event with the specified name. All subscribed callbacks will be executed.",
                    "returns": [
                        {
                            "desc": "Result of the last triggered callback",
                            "name": "result",
                            "rawdesc": "Result of the last triggered callback",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 130000,
                    "type": "function",
                    "view": "function events.trigger(event_name: string, ...any)\n  -> result: any"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 130018,
                "name": "trigger",
                "rawdesc": "Throw a global event with the specified name. All subscribed callbacks will be executed.",
                "start": 130009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Throw a global event with the specified name. All subscribed callbacks will be executed.\n\n@*param* `event_name` โ The name of the global event to trigger.\n\n@*return* `result` โ Result of the last triggered callback",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to trigger.",
                            "finish": 130029,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to trigger.",
                            "start": 130019,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 130034,
                            "start": 130031,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "Throw a global event with the specified name. All subscribed callbacks will be executed.\n\n@*param* `event_name` โ The name of the global event to trigger.\n\n@*return* `result` โ Result of the last triggered callback",
                    "finish": 180003,
                    "rawdesc": "Throw a global event with the specified name. All subscribed callbacks will be executed.",
                    "returns": [
                        {
                            "desc": "Result of the last triggered callback",
                            "name": "result",
                            "rawdesc": "Result of the last triggered callback",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 130000,
                    "type": "function",
                    "view": "function events.trigger(event_name: string, ...any)\n  -> result: any"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 130018,
                "name": "trigger",
                "rawdesc": "Throw a global event with the specified name. All subscribed callbacks will be executed.",
                "start": 130009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Throw a global event with the specified name. All subscribed callbacks will be executed.\n\n@*param* `event_name` โ The name of the global event to trigger.\n\n@*return* `result` โ Result of the last triggered callback",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to trigger.",
                            "finish": 130029,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to trigger.",
                            "start": 130019,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 130034,
                            "start": 130031,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "Throw a global event with the specified name. All subscribed callbacks will be executed.\n\n@*param* `event_name` โ The name of the global event to trigger.\n\n@*return* `result` โ Result of the last triggered callback",
                    "finish": 180003,
                    "rawdesc": "Throw a global event with the specified name. All subscribed callbacks will be executed.",
                    "returns": [
                        {
                            "desc": "Result of the last triggered callback",
                            "name": "result",
                            "rawdesc": "Result of the last triggered callback",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 130000,
                    "type": "function",
                    "view": "function events.trigger(event_name: string, ...any)\n  -> result: any"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 130018,
                "name": "trigger",
                "rawdesc": "Throw a global event with the specified name. All subscribed callbacks will be executed.",
                "start": 130009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove a previously subscribed callback from the specified global event.\n\n@*param* `event_name` โ The name of the global event to unsubscribe from.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to unsubscribe from.",
                            "finish": 510033,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to unsubscribe from.",
                            "start": 510023,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function to unsubscribe.",
                            "finish": 510043,
                            "name": "callback",
                            "rawdesc": "The callback function to unsubscribe.",
                            "start": 510035,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.",
                            "finish": 510061,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.",
                            "start": 510045,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Remove a previously subscribed callback from the specified global event.\n\n@*param* `event_name` โ The name of the global event to unsubscribe from.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                    "finish": 570003,
                    "rawdesc": "Remove a previously subscribed callback from the specified global event.",
                    "returns": [
                        {
                            "desc": "True if event is unsubscribed",
                            "name": "is_unsubscribed",
                            "rawdesc": "True if event is unsubscribed",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 510000,
                    "type": "function",
                    "view": "function events.unsubscribe(event_name: string, callback: function, callback_context: any)\n  -> is_unsubscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 510022,
                "name": "unsubscribe",
                "rawdesc": "Remove a previously subscribed callback from the specified global event.",
                "start": 510009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove a previously subscribed callback from the specified global event.\n\n@*param* `event_name` โ The name of the global event to unsubscribe from.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to unsubscribe from.",
                            "finish": 510033,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to unsubscribe from.",
                            "start": 510023,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function to unsubscribe.",
                            "finish": 510043,
                            "name": "callback",
                            "rawdesc": "The callback function to unsubscribe.",
                            "start": 510035,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.",
                            "finish": 510061,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.",
                            "start": 510045,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Remove a previously subscribed callback from the specified global event.\n\n@*param* `event_name` โ The name of the global event to unsubscribe from.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                    "finish": 570003,
                    "rawdesc": "Remove a previously subscribed callback from the specified global event.",
                    "returns": [
                        {
                            "desc": "True if event is unsubscribed",
                            "name": "is_unsubscribed",
                            "rawdesc": "True if event is unsubscribed",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 510000,
                    "type": "function",
                    "view": "function events.unsubscribe(event_name: string, callback: function, callback_context: any)\n  -> is_unsubscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 510022,
                "name": "unsubscribe",
                "rawdesc": "Remove a previously subscribed callback from the specified global event.",
                "start": 510009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove a previously subscribed callback from the specified global event.\n\n@*param* `event_name` โ The name of the global event to unsubscribe from.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to unsubscribe from.",
                            "finish": 510033,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to unsubscribe from.",
                            "start": 510023,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function to unsubscribe.",
                            "finish": 510043,
                            "name": "callback",
                            "rawdesc": "The callback function to unsubscribe.",
                            "start": 510035,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.",
                            "finish": 510061,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.",
                            "start": 510045,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Remove a previously subscribed callback from the specified global event.\n\n@*param* `event_name` โ The name of the global event to unsubscribe from.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                    "finish": 570003,
                    "rawdesc": "Remove a previously subscribed callback from the specified global event.",
                    "returns": [
                        {
                            "desc": "True if event is unsubscribed",
                            "name": "is_unsubscribed",
                            "rawdesc": "True if event is unsubscribed",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 510000,
                    "type": "function",
                    "view": "function events.unsubscribe(event_name: string, callback: function, callback_context: any)\n  -> is_unsubscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 510022,
                "name": "unsubscribe",
                "rawdesc": "Remove a previously subscribed callback from the specified global event.",
                "start": 510009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove a previously subscribed callback from the specified global event.\n\n@*param* `event_name` โ The name of the global event to unsubscribe from.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to unsubscribe from.",
                            "finish": 510033,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to unsubscribe from.",
                            "start": 510023,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function to unsubscribe.",
                            "finish": 510043,
                            "name": "callback",
                            "rawdesc": "The callback function to unsubscribe.",
                            "start": 510035,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.",
                            "finish": 510061,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.",
                            "start": 510045,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Remove a previously subscribed callback from the specified global event.\n\n@*param* `event_name` โ The name of the global event to unsubscribe from.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                    "finish": 570003,
                    "rawdesc": "Remove a previously subscribed callback from the specified global event.",
                    "returns": [
                        {
                            "desc": "True if event is unsubscribed",
                            "name": "is_unsubscribed",
                            "rawdesc": "True if event is unsubscribed",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 510000,
                    "type": "function",
                    "view": "function events.unsubscribe(event_name: string, callback: function, callback_context: any)\n  -> is_unsubscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 510022,
                "name": "unsubscribe",
                "rawdesc": "Remove a previously subscribed callback from the specified global event.",
                "start": 510009,
                "type": "setfield",
                "visible": "public"
            },
            {
                "desc": "Remove a previously subscribed callback from the specified global event.\n\n@*param* `event_name` โ The name of the global event to unsubscribe from.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                "extends": {
                    "args": [
                        {
                            "desc": "The name of the global event to unsubscribe from.",
                            "finish": 510033,
                            "name": "event_name",
                            "rawdesc": "The name of the global event to unsubscribe from.",
                            "start": 510023,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "desc": "The callback function to unsubscribe.",
                            "finish": 510043,
                            "name": "callback",
                            "rawdesc": "The callback function to unsubscribe.",
                            "start": 510035,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "desc": "The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.",
                            "finish": 510061,
                            "name": "callback_context",
                            "rawdesc": "The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.",
                            "start": 510045,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "Remove a previously subscribed callback from the specified global event.\n\n@*param* `event_name` โ The name of the global event to unsubscribe from.\n\n@*param* `callback` โ The callback function to unsubscribe.\n\n@*param* `callback_context` โ The first parameter to be passed to the callback function. If not provided, all callbacks with the same function will be unsubscribed.\n\n@*return* `is_unsubscribed` โ True if event is unsubscribed",
                    "finish": 570003,
                    "rawdesc": "Remove a previously subscribed callback from the specified global event.",
                    "returns": [
                        {
                            "desc": "True if event is unsubscribed",
                            "name": "is_unsubscribed",
                            "rawdesc": "True if event is unsubscribed",
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 510000,
                    "type": "function",
                    "view": "function events.unsubscribe(event_name: string, callback: function, callback_context: any)\n  -> is_unsubscribed: boolean"
                },
                "file": "file:///Users/insality/code/defold/defold-event/./event/events.lua",
                "finish": 510022,
                "name": "unsubscribe",
                "rawdesc": "Remove a previously subscribed callback from the specified global event.",
                "start": 510009,
                "type": "setfield",
                "visible": "public"
            }
        ],
        "name": "events",
        "type": "type"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 810018,
                            "name": "f",
                            "start": 810017,
                            "type": "local",
                            "view": "(integer|fun(...any):...unknown)?"
                        }
                    ],
                    "desc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                    "finish": 810023,
                    "rawdesc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 810000,
                    "type": "function",
                    "view": "function getfenv(f?: integer|fun(...any):...unknown)\n  -> table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 810016,
                "start": 810009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
        "name": "getfenv",
        "rawdesc": "\nReturns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getfenv\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 910028,
                            "name": "object",
                            "start": 910022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                    "finish": 910033,
                    "rawdesc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
                    "returns": [
                        {
                            "name": "metatable",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 910000,
                    "type": "function",
                    "view": "function getmetatable(object: any)\n  -> metatable: table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 910021,
                "start": 910009,
                "type": "setglobal"
            }
        ],
        "desc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
        "name": "getmetatable",
        "rawdesc": "\nIf object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-getmetatable\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                    "finish": 260007,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
                    "start": 260005,
                    "type": "table",
                    "view": "iolib"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 260002,
                "start": 260000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
        "name": "io",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": 510022,
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": 510018,
                            "type": "local",
                            "view": "file*?"
                        }
                    ],
                    "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": 510027,
                    "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 510000,
                    "type": "function",
                    "view": "function io.close(file?: file*)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 510017,
                "start": 510009,
                "type": "setfield"
            }
        ],
        "desc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
        "name": "io.close",
        "rawdesc": "\nClose `file` or default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.close\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "finish": 580023,
                    "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
                    "start": 580000,
                    "type": "function",
                    "view": "function io.flush()"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 580017,
                "start": 580009,
                "type": "setfield"
            }
        ],
        "desc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
        "name": "io.flush",
        "rawdesc": "\nSaves any written data to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.flush\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": 670022,
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": 670018,
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "finish": 670027,
                    "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
                    "start": 670000,
                    "type": "function",
                    "view": "function io.input(file: string|file*)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 670017,
                "start": 670009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
        "name": "io.input",
        "rawdesc": "\nSets `file` as the default input file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.input\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 830026,
                            "name": "filename",
                            "start": 830018,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 830031,
                            "start": 830028,
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": 830036,
                    "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():any, ...unknown"
                        }
                    ],
                    "start": 830000,
                    "type": "function",
                    "view": "function io.lines(filename?: string, ...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> fun():any, ...unknown"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 830017,
                "start": 830009,
                "type": "setfield"
            }
        ],
        "desc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
        "name": "io.lines",
        "rawdesc": "\n------\n```lua\nfor c in io.lines(filename, ...) do\n    body\nend\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.lines\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 950025,
                            "name": "filename",
                            "start": 950017,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 950031,
                            "name": "mode",
                            "start": 950027,
                            "type": "local",
                            "view": "(\"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))?"
                        }
                    ],
                    "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "finish": 950036,
                    "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 950000,
                    "type": "function",
                    "view": "function io.open(filename: string, mode?: \"a\"|\"a+\"|\"a+b\"|\"ab\"|\"r\"...(+7))\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 950016,
                "start": 950009,
                "type": "setfield"
            }
        ],
        "desc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
        "name": "io.open",
        "rawdesc": "\nOpens a file, in the mode specified in the string `mode`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.open\"])\n\n\n```lua\nmode:\n   -> \"r\" -- Read mode.\n    | \"w\" -- Write mode.\n    | \"a\" -- Append mode.\n    | \"r+\" -- Update mode, all previous data is preserved.\n    | \"w+\" -- Update mode, all previous data is erased.\n    | \"a+\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file.\n    | \"rb\" -- Read mode. (in binary mode.)\n    | \"wb\" -- Write mode. (in binary mode.)\n    | \"ab\" -- Append mode. (in binary mode.)\n    | \"r+b\" -- Update mode, all previous data is preserved. (in binary mode.)\n    | \"w+b\" -- Update mode, all previous data is erased. (in binary mode.)\n    | \"a+b\" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": 1040023,
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": 1040019,
                            "type": "local",
                            "view": "string|file*"
                        }
                    ],
                    "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "finish": 1040028,
                    "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
                    "start": 1040000,
                    "type": "function",
                    "view": "function io.output(file: string|file*)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1040018,
                "start": 1040009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
        "name": "io.output",
        "rawdesc": "\nSets `file` as the default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.output\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1190022,
                            "name": "prog",
                            "start": 1190018,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1190028,
                            "name": "mode",
                            "start": 1190024,
                            "type": "local",
                            "view": "(\"r\"|\"w\")?"
                        }
                    ],
                    "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "finish": 1190033,
                    "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1190000,
                    "type": "function",
                    "view": "function io.popen(prog: string, mode?: \"r\"|\"w\")\n  -> file*?\n  2. errmsg: string?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1190017,
                "start": 1190009,
                "type": "setfield"
            }
        ],
        "desc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
        "name": "io.popen",
        "rawdesc": "\nStarts program prog in a separated process.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.popen\"])\n\n\n```lua\nmode:\n    | \"r\" -- Read data from this program by `file`.\n    | \"w\" -- Write data to this program by `file`.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1300020,
                            "start": 1300017,
                            "type": "...",
                            "view": "string|integer|\"L\"|\"a\"|\"l\"...(+1)"
                        }
                    ],
                    "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "finish": 1300025,
                    "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1300000,
                    "type": "function",
                    "view": "function io.read(...string|integer|\"L\"|\"a\"|\"l\"...(+1))\n  -> any\n  2. ...any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1300016,
                "start": 1300009,
                "type": "setfield"
            }
        ],
        "desc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
        "name": "io.read",
        "rawdesc": "\nReads the `file`, according to the given formats, which specify what to read.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.read\"])\n\n\n```lua\n...(param):\n    | \"n\" -- Reads a numeral and returns it as number.\n    | \"a\" -- Reads the whole file.\n   -> \"l\" -- Reads the next line skipping the end of line.\n    | \"L\" -- Reads the next line keeping the end of line.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "finish": 1390025,
                    "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        }
                    ],
                    "start": 1390000,
                    "type": "function",
                    "view": "function io.tmpfile()\n  -> file*"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1390019,
                "start": 1390009,
                "type": "setfield"
            }
        ],
        "desc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
        "name": "io.tmpfile",
        "rawdesc": "\nIn case of success, returns a handle for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.tmpfile\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "finish": 1540021,
                            "name": "file",
                            "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-file\"])\n",
                            "start": 1540017,
                            "type": "local",
                            "view": "file*"
                        }
                    ],
                    "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "finish": 1540026,
                    "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"closed file\"|\"file\"|`nil`"
                        }
                    ],
                    "start": 1540000,
                    "type": "function",
                    "view": "function io.type(file: file*)\n  -> \"closed file\"|\"file\"|`nil`"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1540016,
                "start": 1540009,
                "type": "setfield"
            }
        ],
        "desc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
        "name": "io.type",
        "rawdesc": "\nChecks whether `obj` is a valid file handle.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.type\"])\n\n\n```lua\nreturn #1:\n    | \"file\" -- Is an open file handle.\n    | \"closed file\" -- Is a closed file handle.\n    | `nil` -- Is not a file handle.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1630021,
                            "start": 1630018,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "finish": 1630026,
                    "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "file*"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1630000,
                    "type": "function",
                    "view": "function io.write(...any)\n  -> file*\n  2. errmsg: string?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/io.lua",
                "finish": 1630017,
                "start": 1630009,
                "type": "setfield"
            }
        ],
        "desc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
        "name": "io.write",
        "rawdesc": "\nWrites the value of each of its arguments to default output file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1080017,
                            "name": "t",
                            "start": 1080016,
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the keyโvalue pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                    "finish": 1080022,
                    "rawdesc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the keyโvalue pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(table: <V>[], i?: integer):integer, <V>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        },
                        {
                            "name": "i",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1080000,
                    "type": "function",
                    "view": "function ipairs(t: <T:table>)\n  -> fun(table: <V>[], i?: integer):integer, <V>\n  2. <T:table>\n  3. i: integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1080015,
                "start": 1080009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the keyโvalue pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
        "name": "ipairs",
        "rawdesc": "\nReturns three values (an iterator function, the table `t`, and `0`) so that the construction\n```lua\n    for i,v in ipairs(t) do body end\n```\nwill iterate over the keyโvalue pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-ipairs\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1300019,
                            "name": "chunk",
                            "start": 1300014,
                            "type": "local",
                            "view": "string|function"
                        },
                        {
                            "finish": 1300030,
                            "name": "chunkname",
                            "start": 1300021,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 1300036,
                            "name": "mode",
                            "start": 1300032,
                            "type": "local",
                            "view": "(\"b\"|\"bt\"|\"t\")?"
                        },
                        {
                            "finish": 1300041,
                            "name": "env",
                            "start": 1300038,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "finish": 1300046,
                    "rawdesc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1300000,
                    "type": "function",
                    "view": "function load(chunk: string|function, chunkname?: string, mode?: \"b\"|\"bt\"|\"t\", env?: table)\n  -> function?\n  2. error_message: string?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1300013,
                "start": 1300009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
        "name": "load",
        "rawdesc": "\nLoads a chunk.\n\nIf `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-load\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1430026,
                            "name": "filename",
                            "start": 1430018,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 1430032,
                            "name": "mode",
                            "start": 1430028,
                            "type": "local",
                            "view": "(\"b\"|\"bt\"|\"t\")?"
                        },
                        {
                            "finish": 1430037,
                            "name": "env",
                            "start": 1430034,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "finish": 1430042,
                    "rawdesc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1430000,
                    "type": "function",
                    "view": "function loadfile(filename?: string, mode?: \"b\"|\"bt\"|\"t\", env?: table)\n  -> function?\n  2. error_message: string?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1430017,
                "start": 1430009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
        "name": "loadfile",
        "rawdesc": "\nLoads a chunk from file `filename` or from the standard input, if no file name is given.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadfile\"])\n\n\n```lua\nmode:\n    | \"b\" -- Only binary chunks.\n    | \"t\" -- Only text chunks.\n   -> \"bt\" -- Both binary and text.\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1560024,
                            "name": "text",
                            "start": 1560020,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1560035,
                            "name": "chunkname",
                            "start": 1560026,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                    "finish": 1560040,
                    "rawdesc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function?"
                        },
                        {
                            "name": "error_message",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1560000,
                    "type": "function",
                    "view": "function loadstring(text: string, chunkname?: string)\n  -> function?\n  2. error_message: string?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1560019,
                "start": 1560009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
        "name": "loadstring",
        "rawdesc": "\nLoads a chunk from the given string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-loadstring\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                    "finish": 320009,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
                    "start": 320007,
                    "type": "table",
                    "view": "mathlib"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 320004,
                "start": 320000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
        "name": "math",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 430019,
                            "name": "x",
                            "start": 430018,
                            "type": "local",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "finish": 430024,
                    "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": 430000,
                    "type": "function",
                    "view": "function math.abs(x: <Number:number>)\n  -> <Number:number>"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 430017,
                "start": 430009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
        "name": "math.abs",
        "rawdesc": "\nReturns the absolute value of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.abs\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 530020,
                            "name": "x",
                            "start": 530019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "finish": 530025,
                    "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 530000,
                    "type": "function",
                    "view": "function math.acos(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 530018,
                "start": 530009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
        "name": "math.acos",
        "rawdesc": "\nReturns the arc cosine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.acos\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 630020,
                            "name": "x",
                            "start": 630019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "finish": 630025,
                    "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 630000,
                    "type": "function",
                    "view": "function math.asin(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 630018,
                "start": 630009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
        "name": "math.asin",
        "rawdesc": "\nReturns the arc sine of `x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.asin\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 740020,
                            "name": "y",
                            "start": 740019,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 740023,
                            "name": "x",
                            "start": 740022,
                            "type": "local",
                            "view": "number?"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "finish": 740028,
                    "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 740000,
                    "type": "function",
                    "view": "function math.atan(y: number, x?: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 740018,
                "start": 740009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
        "name": "math.atan",
        "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 860021,
                            "name": "y",
                            "start": 860020,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 860024,
                            "name": "x",
                            "start": 860023,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "finish": 860029,
                    "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 860000,
                    "type": "function",
                    "view": "function math.atan2(y: number, x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 860019,
                "start": 860009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
        "name": "math.atan2",
        "rawdesc": "\nReturns the arc tangent of `y/x` (in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.atan2\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 960020,
                            "name": "x",
                            "start": 960019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "finish": 960025,
                    "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 960000,
                    "type": "function",
                    "view": "function math.ceil(x: number)\n  -> integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 960018,
                "start": 960009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
        "name": "math.ceil",
        "rawdesc": "\nReturns the smallest integral value larger than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ceil\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1060019,
                            "name": "x",
                            "start": 1060018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "finish": 1060024,
                    "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1060000,
                    "type": "function",
                    "view": "function math.cos(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1060017,
                "start": 1060009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
        "name": "math.cos",
        "rawdesc": "\nReturns the cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cos\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1170020,
                            "name": "x",
                            "start": 1170019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "finish": 1170025,
                    "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1170000,
                    "type": "function",
                    "view": "function math.cosh(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1170018,
                "start": 1170009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
        "name": "math.cosh",
        "rawdesc": "\nReturns the hyperbolic cosine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.cosh\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1270019,
                            "name": "x",
                            "start": 1270018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "finish": 1270024,
                    "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1270000,
                    "type": "function",
                    "view": "function math.deg(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1270017,
                "start": 1270009,
                "type": "setfield"
            }
        ],
        "desc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
        "name": "math.deg",
        "rawdesc": "\nConverts the angle `x` from radians to degrees.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.deg\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1370019,
                            "name": "x",
                            "start": 1370018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "finish": 1370024,
                    "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1370000,
                    "type": "function",
                    "view": "function math.exp(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1370017,
                "start": 1370009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
        "name": "math.exp",
        "rawdesc": "\nReturns the value `e^x` (where `e` is the base of natural logarithms).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.exp\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1470021,
                            "name": "x",
                            "start": 1470020,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "finish": 1470026,
                    "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1470000,
                    "type": "function",
                    "view": "function math.floor(x: number)\n  -> integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1470019,
                "start": 1470009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
        "name": "math.floor",
        "rawdesc": "\nReturns the largest integral value smaller than or equal to `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.floor\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1580020,
                            "name": "x",
                            "start": 1580019,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 1580023,
                            "name": "y",
                            "start": 1580022,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "finish": 1580028,
                    "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1580000,
                    "type": "function",
                    "view": "function math.fmod(x: number, y: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1580018,
                "start": 1580009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
        "name": "math.fmod",
        "rawdesc": "\nReturns the remainder of the division of `x` by `y` that rounds the quotient towards zero.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.fmod\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1700021,
                            "name": "x",
                            "start": 1700020,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "finish": 1700026,
                    "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
                    "returns": [
                        {
                            "name": "m",
                            "type": "function.return",
                            "view": "number"
                        },
                        {
                            "name": "e",
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1700000,
                    "type": "function",
                    "view": "function math.frexp(x: number)\n  -> m: number\n  2. e: number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1700019,
                "start": 1700009,
                "type": "setfield"
            }
        ],
        "desc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
        "name": "math.frexp",
        "rawdesc": "\nDecompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.frexp\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1820021,
                            "name": "m",
                            "start": 1820020,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 1820024,
                            "name": "e",
                            "start": 1820023,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "finish": 1820029,
                    "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1820000,
                    "type": "function",
                    "view": "function math.ldexp(m: number, e: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1820019,
                "start": 1820009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
        "name": "math.ldexp",
        "rawdesc": "\nReturns `m * (2 ^ e)` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ldexp\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1930019,
                            "name": "x",
                            "start": 1930018,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 1930025,
                            "name": "base",
                            "start": 1930021,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "finish": 1930030,
                    "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 1930000,
                    "type": "function",
                    "view": "function math.log(x: number, base?: integer)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 1930017,
                "start": 1930009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
        "name": "math.log",
        "rawdesc": "\nReturns the logarithm of `x` in the given base.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2040021,
                            "name": "x",
                            "start": 2040020,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "finish": 2040026,
                    "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2040000,
                    "type": "function",
                    "view": "function math.log10(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2040019,
                "start": 2040009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
        "name": "math.log10",
        "rawdesc": "\nReturns the base-10 logarithm of x.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.log10\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2160019,
                            "name": "x",
                            "start": 2160018,
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": 2160024,
                            "start": 2160021,
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "finish": 2160029,
                    "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": 2160000,
                    "type": "function",
                    "view": "function math.max(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2160017,
                "start": 2160009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
        "name": "math.max",
        "rawdesc": "\nReturns the argument with the maximum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.max\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2280019,
                            "name": "x",
                            "start": 2280018,
                            "type": "local",
                            "view": "<Number:number>"
                        },
                        {
                            "finish": 2280024,
                            "start": 2280021,
                            "type": "...",
                            "view": "<Number:number>"
                        }
                    ],
                    "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "finish": 2280029,
                    "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<Number:number>"
                        }
                    ],
                    "start": 2280000,
                    "type": "function",
                    "view": "function math.min(x: <Number:number>, ...<Number:number>)\n  -> <Number:number>"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2280017,
                "start": 2280009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
        "name": "math.min",
        "rawdesc": "\nReturns the argument with the minimum value, according to the Lua operator `<`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.min\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2390020,
                            "name": "x",
                            "start": 2390019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "finish": 2390025,
                    "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2390000,
                    "type": "function",
                    "view": "function math.modf(x: number)\n  -> integer\n  2. number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2390018,
                "start": 2390009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
        "name": "math.modf",
        "rawdesc": "\nReturns the integral part of `x` and the fractional part of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.modf\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2510019,
                            "name": "x",
                            "start": 2510018,
                            "type": "local",
                            "view": "number"
                        },
                        {
                            "finish": 2510022,
                            "name": "y",
                            "start": 2510021,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "finish": 2510027,
                    "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2510000,
                    "type": "function",
                    "view": "function math.pow(x: number, y: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2510017,
                "start": 2510009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
        "name": "math.pow",
        "rawdesc": "\nReturns `x ^ y` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.pow\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2610019,
                            "name": "x",
                            "start": 2610018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "finish": 2610024,
                    "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2610000,
                    "type": "function",
                    "view": "function math.rad(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2610017,
                "start": 2610009,
                "type": "setfield"
            }
        ],
        "desc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
        "name": "math.rad",
        "rawdesc": "\nConverts the angle `x` from degrees to radians.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.rad\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2770022,
                            "name": "m",
                            "start": 2770021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 2770025,
                            "name": "n",
                            "start": 2770024,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "finish": 2770030,
                    "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2770000,
                    "type": "function",
                    "view": "function math.random(m: integer, n: integer)\n  -> integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2770020,
                "start": 2770009,
                "type": "setfield"
            }
        ],
        "desc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
        "name": "math.random",
        "rawdesc": "\n* `math.random()`: Returns a float in the range [0,1).\n* `math.random(n)`: Returns a integer in the range [1, n].\n* `math.random(m, n)`: Returns a integer in the range [m, n].\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.random\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2890026,
                            "name": "x",
                            "start": 2890025,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 2890029,
                            "name": "y",
                            "start": 2890028,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "finish": 2890034,
                    "rawdesc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
                    "start": 2890000,
                    "type": "function",
                    "view": "function math.randomseed(x?: integer, y?: integer)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2890024,
                "start": 2890009,
                "type": "setfield"
            }
        ],
        "desc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
        "name": "math.randomseed",
        "rawdesc": "\n* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.\n* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .\n* `math.randomseed()`: Generates a seed with a weak attempt for randomness.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.randomseed\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2990019,
                            "name": "x",
                            "start": 2990018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "finish": 2990024,
                    "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 2990000,
                    "type": "function",
                    "view": "function math.sin(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 2990017,
                "start": 2990009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
        "name": "math.sin",
        "rawdesc": "\nReturns the sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sin\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3100020,
                            "name": "x",
                            "start": 3100019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "finish": 3100025,
                    "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3100000,
                    "type": "function",
                    "view": "function math.sinh(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3100018,
                "start": 3100009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
        "name": "math.sinh",
        "rawdesc": "\nReturns the hyperbolic sine of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sinh\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3200020,
                            "name": "x",
                            "start": 3200019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "finish": 3200025,
                    "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3200000,
                    "type": "function",
                    "view": "function math.sqrt(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3200018,
                "start": 3200009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
        "name": "math.sqrt",
        "rawdesc": "\nReturns the square root of `x`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.sqrt\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3300019,
                            "name": "x",
                            "start": 3300018,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "finish": 3300024,
                    "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3300000,
                    "type": "function",
                    "view": "function math.tan(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3300017,
                "start": 3300009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
        "name": "math.tan",
        "rawdesc": "\nReturns the tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tan\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3410020,
                            "name": "x",
                            "start": 3410019,
                            "type": "local",
                            "view": "number"
                        }
                    ],
                    "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "finish": 3410025,
                    "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 3410000,
                    "type": "function",
                    "view": "function math.tanh(x: number)\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3410018,
                "start": 3410009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
        "name": "math.tanh",
        "rawdesc": "\nReturns the hyperbolic tangent of `x` (assumed to be in radians).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tanh\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3520025,
                            "name": "x",
                            "start": 3520024,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "finish": 3520030,
                    "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 3520000,
                    "type": "function",
                    "view": "function math.tointeger(x: any)\n  -> integer?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3520023,
                "start": 3520009,
                "type": "setfield"
            }
        ],
        "desc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
        "name": "math.tointeger",
        "rawdesc": "\nMiss locale <math.tointeger>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.tointeger\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3650020,
                            "name": "x",
                            "start": 3650019,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "finish": 3650025,
                    "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "\"float\"|\"integer\"|'nil'"
                        }
                    ],
                    "start": 3650000,
                    "type": "function",
                    "view": "function math.type(x: any)\n  -> \"float\"|\"integer\"|'nil'"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3650018,
                "start": 3650009,
                "type": "setfield"
            }
        ],
        "desc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
        "name": "math.type",
        "rawdesc": "\nMiss locale <math.type>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.type\"])\n\n\n```lua\nreturn #1:\n    | \"integer\"\n    | \"float\"\n    | 'nil'\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3760019,
                            "name": "m",
                            "start": 3760018,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 3760022,
                            "name": "n",
                            "start": 3760021,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "finish": 3760027,
                    "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 3760000,
                    "type": "function",
                    "view": "function math.ult(m: integer, n: integer)\n  -> boolean"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/math.lua",
                "finish": 3760017,
                "start": 3760009,
                "type": "setfield"
            }
        ],
        "desc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
        "name": "math.ult",
        "rawdesc": "\nMiss locale <math.ult>\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-math.ult\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1720020,
                            "name": "name",
                            "start": 1720016,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1720025,
                            "start": 1720022,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                    "finish": 1720030,
                    "rawdesc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
                    "start": 1720000,
                    "type": "function",
                    "view": "function module(name: string, ...any)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1720015,
                "start": 1720009,
                "type": "setglobal"
            }
        ],
        "desc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
        "name": "module",
        "rawdesc": "\nCreates a module.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-module\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1620023,
                            "name": "proxy",
                            "start": 1620018,
                            "type": "local",
                            "view": "boolean|table|userdata"
                        }
                    ],
                    "finish": 1620028,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "userdata"
                        }
                    ],
                    "start": 1620000,
                    "type": "function",
                    "view": "function newproxy(proxy: boolean|table|userdata)\n  -> userdata"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1620017,
                "start": 1620009,
                "type": "setglobal"
            }
        ],
        "name": "newproxy",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1900019,
                            "name": "table",
                            "start": 1900014,
                            "type": "local",
                            "view": "table<<K>, <V>>"
                        },
                        {
                            "finish": 1900026,
                            "name": "index",
                            "start": 1900021,
                            "type": "local",
                            "view": "<K>?"
                        }
                    ],
                    "desc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                    "finish": 1900031,
                    "rawdesc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<K>?"
                        },
                        {
                            "type": "function.return",
                            "view": "<V>?"
                        }
                    ],
                    "start": 1900000,
                    "type": "function",
                    "view": "function next(table: table<<K>, <V>>, index?: <K>)\n  -> <K>?\n  2. <V>?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 1900013,
                "start": 1900009,
                "type": "setglobal"
            }
        ],
        "desc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
        "name": "next",
        "rawdesc": "\nAllows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                    "finish": 80007,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
                    "start": 80005,
                    "type": "table",
                    "view": "oslib"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 80002,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
        "name": "os",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "finish": 170023,
                    "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number"
                        }
                    ],
                    "start": 170000,
                    "type": "function",
                    "view": "function os.clock()\n  -> number"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 170017,
                "start": 170009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
        "name": "os.clock",
        "rawdesc": "\nReturns an approximation of the amount in seconds of CPU time used by the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.clock\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 840023,
                            "name": "format",
                            "start": 840017,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 840029,
                            "name": "time",
                            "start": 840025,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "finish": 840034,
                    "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string|osdate"
                        }
                    ],
                    "start": 840000,
                    "type": "function",
                    "view": "function os.date(format?: string, time?: integer)\n  -> string|osdate"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 840016,
                "start": 840009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
        "name": "os.date",
        "rawdesc": "\nReturns a string or a table containing date and time, formatted according to the given string `format`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.date\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 950023,
                            "name": "t2",
                            "start": 950021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 950027,
                            "name": "t1",
                            "start": 950025,
                            "type": "local",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "finish": 950032,
                    "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 950000,
                    "type": "function",
                    "view": "function os.difftime(t2: integer, t1: integer)\n  -> integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 950020,
                "start": 950009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
        "name": "os.difftime",
        "rawdesc": "\nReturns the difference, in seconds, from time `t1` to time `t2`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.difftime\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1060027,
                            "name": "command",
                            "start": 1060020,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "finish": 1060032,
                    "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean?"
                        },
                        {
                            "name": "exitcode",
                            "type": "function.return",
                            "view": "(\"exit\"|\"signal\")?"
                        },
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 1060000,
                    "type": "function",
                    "view": "function os.execute(command?: string)\n  -> suc: boolean?\n  2. exitcode: (\"exit\"|\"signal\")?\n  3. code: integer?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1060019,
                "start": 1060009,
                "type": "setfield"
            }
        ],
        "desc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
        "name": "os.execute",
        "rawdesc": "\nPasses `command` to be executed by an operating system shell.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.execute\"])\n\n\n```lua\nexitcode:\n    | \"exit\"\n    | \"signal\"\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1150021,
                            "name": "code",
                            "start": 1150017,
                            "type": "local",
                            "view": "(boolean|integer)?"
                        },
                        {
                            "finish": 1150028,
                            "name": "close",
                            "start": 1150023,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "finish": 1150033,
                    "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
                    "start": 1150000,
                    "type": "function",
                    "view": "function os.exit(code?: boolean|integer, close?: boolean)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1150016,
                "start": 1150009,
                "type": "setfield"
            }
        ],
        "desc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
        "name": "os.exit",
        "rawdesc": "\nCalls the ISO C function `exit` to terminate the host program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.exit\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1250026,
                            "name": "varname",
                            "start": 1250019,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "finish": 1250031,
                    "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1250000,
                    "type": "function",
                    "view": "function os.getenv(varname: string)\n  -> string?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1250018,
                "start": 1250009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
        "name": "os.getenv",
        "rawdesc": "\nReturns the value of the process environment variable `varname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.getenv\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1350027,
                            "name": "filename",
                            "start": 1350019,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "finish": 1350032,
                    "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1350000,
                    "type": "function",
                    "view": "function os.remove(filename: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1350018,
                "start": 1350009,
                "type": "setfield"
            }
        ],
        "desc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
        "name": "os.remove",
        "rawdesc": "\nDeletes the file with the given name.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.remove\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1460026,
                            "name": "oldname",
                            "start": 1460019,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1460035,
                            "name": "newname",
                            "start": 1460028,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "finish": 1460040,
                    "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
                    "returns": [
                        {
                            "name": "suc",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 1460000,
                    "type": "function",
                    "view": "function os.rename(oldname: string, newname: string)\n  -> suc: boolean\n  2. errmsg: string?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1460018,
                "start": 1460009,
                "type": "setfield"
            }
        ],
        "desc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
        "name": "os.rename",
        "rawdesc": "\nRenames the file or directory named `oldname` to `newname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.rename\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1640028,
                            "name": "locale",
                            "start": 1640022,
                            "type": "local",
                            "view": "string|nil"
                        },
                        {
                            "finish": 1640038,
                            "name": "category",
                            "start": 1640030,
                            "type": "local",
                            "view": "(\"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))?"
                        }
                    ],
                    "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "finish": 1640043,
                    "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
                    "returns": [
                        {
                            "name": "localecategory",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1640000,
                    "type": "function",
                    "view": "function os.setlocale(locale: string|nil, category?: \"all\"|\"collate\"|\"ctype\"|\"monetary\"|\"numeric\"...(+1))\n  -> localecategory: string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 1640021,
                "start": 1640009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
        "name": "os.setlocale",
        "rawdesc": "\nSets the current locale of the program.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.setlocale\"])\n\n\n```lua\ncategory:\n   -> \"all\"\n    | \"collate\"\n    | \"ctype\"\n    | \"monetary\"\n    | \"numeric\"\n    | \"time\"\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2300021,
                            "name": "date",
                            "start": 2300017,
                            "type": "local",
                            "view": "osdateparam?"
                        }
                    ],
                    "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "finish": 2300026,
                    "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2300000,
                    "type": "function",
                    "view": "function os.time(date?: osdateparam)\n  -> integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 2300016,
                "start": 2300009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
        "name": "os.time",
        "rawdesc": "\nReturns the current time when called without arguments, or a time representing the local date and time specified by the given table.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.time\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [],
                    "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "finish": 2390025,
                    "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2390000,
                    "type": "function",
                    "view": "function os.tmpname()\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/os.lua",
                "finish": 2390019,
                "start": 2390009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
        "name": "os.tmpname",
        "rawdesc": "\nReturns a string with a file name that can be used for a temporary file.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-os.tmpname\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                    "finish": 420012,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
                    "start": 420010,
                    "type": "table",
                    "view": "packagelib"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 420007,
                "start": 420000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
        "name": "package",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                    "finish": 540003,
                    "rawdesc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
                    "start": 490017,
                    "type": "string",
                    "view": "string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 490014,
                "start": 490000,
                "type": "setfield"
            }
        ],
        "desc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
        "name": "package.config",
        "rawdesc": "\nA string describing some compile-time configurations for packages.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.config\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                    "finish": 620020,
                    "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
                    "start": 620018,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 620015,
                "start": 620000,
                "type": "setfield"
            }
        ],
        "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
        "name": "package.loaders",
        "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loaders\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 720032,
                            "name": "libname",
                            "start": 720025,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 720042,
                            "name": "funcname",
                            "start": 720034,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "finish": 720047,
                    "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 720000,
                    "type": "function",
                    "view": "function package.loadlib(libname: string, funcname: string)\n  -> any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 720024,
                "start": 720009,
                "type": "setfield"
            }
        ],
        "desc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
        "name": "package.loadlib",
        "rawdesc": "\nDynamically links the host program with the C library `libname`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.loadlib\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                    "finish": 800022,
                    "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
                    "start": 800020,
                    "type": "table",
                    "view": "table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 800017,
                "start": 800000,
                "type": "setfield"
            }
        ],
        "desc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
        "name": "package.searchers",
        "rawdesc": "\nA table used by `require` to control how to load modules.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchers\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 950032,
                            "name": "name",
                            "start": 950028,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 950038,
                            "name": "path",
                            "start": 950034,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 950043,
                            "name": "sep",
                            "start": 950040,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 950048,
                            "name": "rep",
                            "start": 950045,
                            "type": "local",
                            "view": "string?"
                        }
                    ],
                    "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "finish": 950053,
                    "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
                    "returns": [
                        {
                            "name": "filename",
                            "type": "function.return",
                            "view": "string?"
                        },
                        {
                            "name": "errmsg",
                            "type": "function.return",
                            "view": "string?"
                        }
                    ],
                    "start": 950000,
                    "type": "function",
                    "view": "function package.searchpath(name: string, path: string, sep?: string, rep?: string)\n  -> filename: string?\n  2. errmsg: string?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 950027,
                "start": 950009,
                "type": "setfield"
            }
        ],
        "desc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
        "name": "package.searchpath",
        "rawdesc": "\nSearches for the given `name` in the given `path`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.searchpath\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1040030,
                            "name": "module",
                            "start": 1040024,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "finish": 1040035,
                    "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
                    "start": 1040000,
                    "type": "function",
                    "view": "function package.seeall(module: table)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 1040023,
                "start": 1040009,
                "type": "setfield"
            }
        ],
        "desc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
        "name": "package.seeall",
        "rawdesc": "\nSets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-package.seeall\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2100016,
                            "name": "t",
                            "start": 2100015,
                            "type": "local",
                            "view": "<T:table>"
                        }
                    ],
                    "desc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all keyโvalue pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                    "finish": 2100021,
                    "rawdesc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all keyโvalue pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(table: table<<K>, <V>>, index?: <K>):<K>, <V>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T:table>"
                        }
                    ],
                    "start": 2100000,
                    "type": "function",
                    "view": "function pairs(t: <T:table>)\n  -> fun(table: table<<K>, <V>>, index?: <K>):<K>, <V>\n  2. <T:table>"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2100014,
                "start": 2100009,
                "type": "setglobal"
            }
        ],
        "desc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all keyโvalue pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
        "name": "pairs",
        "rawdesc": "\nIf `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.\n\nOtherwise, returns three values: the [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) function, the table `t`, and `nil`, so that the construction\n```lua\n    for k,v in pairs(t) do body end\n```\nwill iterate over all keyโvalue pairs of table `t`.\n\nSee function [next](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-next\"]) for the caveats of modifying the table during its traversal.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pairs\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2240016,
                            "name": "f",
                            "start": 2240015,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 2240022,
                            "name": "arg1",
                            "start": 2240018,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2240027,
                            "start": 2240024,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                    "finish": 2240032,
                    "rawdesc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "result",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 2240000,
                    "type": "function",
                    "view": "function pcall(f: fun(...any):...unknown, arg1?: any, ...any)\n  -> success: boolean\n  2. result: any\n  3. ...any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2240014,
                "start": 2240009,
                "type": "setglobal"
            }
        ],
        "desc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
        "name": "pcall",
        "rawdesc": "\nCalls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-pcall\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2340018,
                            "start": 2340015,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                    "finish": 2340023,
                    "rawdesc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
                    "start": 2340000,
                    "type": "function",
                    "view": "function print(...any)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2340014,
                "start": 2340009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
        "name": "print",
        "rawdesc": "\nReceives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"]).\nThe function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]) and [io.write](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-io.write\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-print\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2450020,
                            "name": "v1",
                            "start": 2450018,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2450024,
                            "name": "v2",
                            "start": 2450022,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                    "finish": 2450029,
                    "rawdesc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "boolean"
                        }
                    ],
                    "start": 2450000,
                    "type": "function",
                    "view": "function rawequal(v1: any, v2: any)\n  -> boolean"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2450017,
                "start": 2450009,
                "type": "setglobal"
            }
        ],
        "desc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
        "name": "rawequal",
        "rawdesc": "\nChecks whether v1 is equal to v2, without invoking the `__eq` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawequal\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2560021,
                            "name": "table",
                            "start": 2560016,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 2560028,
                            "name": "index",
                            "start": 2560023,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                    "finish": 2560033,
                    "rawdesc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 2560000,
                    "type": "function",
                    "view": "function rawget(table: table, index: any)\n  -> any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2560015,
                "start": 2560009,
                "type": "setglobal"
            }
        ],
        "desc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
        "name": "rawget",
        "rawdesc": "\nGets the real value of `table[index]`, without invoking the `__index` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawget\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2660017,
                            "name": "v",
                            "start": 2660016,
                            "type": "local",
                            "view": "string|table"
                        }
                    ],
                    "desc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                    "finish": 2660022,
                    "rawdesc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
                    "returns": [
                        {
                            "name": "len",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2660000,
                    "type": "function",
                    "view": "function rawlen(v: string|table)\n  -> len: integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2660015,
                "start": 2660009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
        "name": "rawlen",
        "rawdesc": "\nReturns the length of the object `v`, without invoking the `__len` metamethod.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawlen\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2790021,
                            "name": "table",
                            "start": 2790016,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 2790028,
                            "name": "index",
                            "start": 2790023,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 2790035,
                            "name": "value",
                            "start": 2790030,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                    "finish": 2790040,
                    "rawdesc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 2790000,
                    "type": "function",
                    "view": "function rawset(table: table, index: any, value: any)\n  -> table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2790015,
                "start": 2790009,
                "type": "setglobal"
            }
        ],
        "desc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
        "name": "rawset",
        "rawdesc": "\nSets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.\nThis function returns `table`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-rawset\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 100024,
                            "name": "modname",
                            "start": 100017,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                    "finish": 100029,
                    "rawdesc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "unknown"
                        },
                        {
                            "name": "loaderdata",
                            "type": "function.return",
                            "view": "unknown"
                        }
                    ],
                    "start": 100000,
                    "type": "function",
                    "view": "function require(modname: string)\n  -> unknown\n  2. loaderdata: unknown"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/package.lua",
                "finish": 100016,
                "start": 100009,
                "type": "setglobal"
            }
        ],
        "desc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
        "name": "require",
        "rawdesc": "\nLoads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-require\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2900021,
                            "name": "index",
                            "start": 2900016,
                            "type": "local",
                            "view": "integer|\"#\""
                        },
                        {
                            "finish": 2900026,
                            "start": 2900023,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                    "finish": 2900031,
                    "rawdesc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 2900000,
                    "type": "function",
                    "view": "function select(index: integer|\"#\", ...any)\n  -> any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 2900015,
                "start": 2900009,
                "type": "setglobal"
            }
        ],
        "desc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
        "name": "select",
        "rawdesc": "\nIf `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `\"#\"`, and `select` returns the total number of extra arguments it received.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-select\"])\n\n\n```lua\nindex:\n    | \"#\"\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3010018,
                            "name": "f",
                            "start": 3010017,
                            "type": "local",
                            "view": "fun(...any):...integer|unknown"
                        },
                        {
                            "finish": 3010025,
                            "name": "table",
                            "start": 3010020,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                    "finish": 3010030,
                    "rawdesc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "function"
                        }
                    ],
                    "start": 3010000,
                    "type": "function",
                    "view": "function setfenv(f: fun(...any):...integer|unknown, table: table)\n  -> function"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3010016,
                "start": 3010009,
                "type": "setglobal"
            }
        ],
        "desc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
        "name": "setfenv",
        "rawdesc": "\nSets the environment to be used by the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setfenv\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3470027,
                            "name": "table",
                            "start": 3470022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 3470038,
                            "name": "metatable",
                            "start": 3470029,
                            "type": "local",
                            "view": "(table|metatable)?"
                        }
                    ],
                    "desc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([ยง6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                    "finish": 3470043,
                    "rawdesc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([ยง6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 3470000,
                    "type": "function",
                    "view": "function setmetatable(table: table, metatable?: table|metatable)\n  -> table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3470021,
                "start": 3470009,
                "type": "setglobal"
            }
        ],
        "desc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([ยง6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
        "name": "setmetatable",
        "rawdesc": "\nSets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.\n\nThis function returns `table`.\n\nTo change the metatable of other types from Lua code, you must use the debug library ([ยง6.10](command:extension.lua.doc?[\"en-us/54/manual.html/6.10\"])).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-setmetatable\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                    "finish": 80011,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
                    "start": 80009,
                    "type": "table",
                    "view": "stringlib"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 80006,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
        "name": "string",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 200022,
                            "name": "s",
                            "start": 200021,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 200025,
                            "name": "i",
                            "start": 200024,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 200028,
                            "name": "j",
                            "start": 200027,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "finish": 200033,
                    "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 200000,
                    "type": "function",
                    "view": "function string.byte(s: string|number, i?: integer, j?: integer)\n  -> ...integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 200020,
                "start": 200009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
        "name": "string.byte",
        "rawdesc": "\nReturns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.byte\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 310025,
                            "name": "byte",
                            "start": 310021,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 310030,
                            "start": 310027,
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "finish": 310035,
                    "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 310000,
                    "type": "function",
                    "view": "function string.char(byte: integer, ...integer)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 310020,
                "start": 310009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
        "name": "string.char",
        "rawdesc": "\nReturns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.char\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 420022,
                            "name": "f",
                            "start": 420021,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 420029,
                            "name": "strip",
                            "start": 420024,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "finish": 420034,
                    "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 420000,
                    "type": "function",
                    "view": "function string.dump(f: fun(...any):...unknown, strip?: boolean)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 420020,
                "start": 420009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
        "name": "string.dump",
        "rawdesc": "\nReturns a string containing a binary representation (a *binary chunk*) of the given function.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.dump\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 570022,
                            "name": "s",
                            "start": 570021,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 570031,
                            "name": "pattern",
                            "start": 570024,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 570037,
                            "name": "init",
                            "start": 570033,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 570044,
                            "name": "plain",
                            "start": 570039,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` โ captured",
                    "finish": 570049,
                    "rawdesc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
                    "returns": [
                        {
                            "name": "start",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "name": "end",
                            "type": "function.return",
                            "view": "integer|nil"
                        },
                        {
                            "desc": "captured",
                            "name": "...",
                            "rawdesc": "captured",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 570000,
                    "type": "function",
                    "view": "function string.find(s: string|number, pattern: string|number, init?: integer, plain?: boolean)\n  -> start: integer|nil\n  2. end: integer|nil\n  3. ...any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 570020,
                "start": 570009,
                "type": "setfield"
            }
        ],
        "desc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])\n\n@*return* `start`\n\n@*return* `end`\n\n@*return* `...` โ captured",
        "name": "string.find",
        "rawdesc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.find\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 680024,
                            "name": "s",
                            "start": 680023,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 680029,
                            "start": 680026,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "finish": 680034,
                    "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 680000,
                    "type": "function",
                    "view": "function string.format(s: string|number, ...any)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 680022,
                "start": 680009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
        "name": "string.format",
        "rawdesc": "\nReturns a formatted version of its variable number of arguments following the description given in its first argument.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 890024,
                            "name": "s",
                            "start": 890023,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 890033,
                            "name": "pattern",
                            "start": 890026,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 890039,
                            "name": "init",
                            "start": 890035,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns an iterator function that, each time it is called, returns the next captures from `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) over the string s.\n\nAs an example, the following loop will iterate over all the words from string s, printing one per line:\n```lua\n    s =\n\"hello world from Lua\"\n    for w in string.gmatch(s, \"%a+\") do\n        print(w)\n    end\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "finish": 890044,
                    "rawdesc": "\nReturns an iterator function that, each time it is called, returns the next captures from `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) over the string s.\n\nAs an example, the following loop will iterate over all the words from string s, printing one per line:\n```lua\n    s =\n\"hello world from Lua\"\n    for w in string.gmatch(s, \"%a+\") do\n        print(w)\n    end\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun():string, ...unknown"
                        }
                    ],
                    "start": 890000,
                    "type": "function",
                    "view": "function string.gmatch(s: string|number, pattern: string|number, init?: integer)\n  -> fun():string, ...unknown"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 890022,
                "start": 890009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns an iterator function that, each time it is called, returns the next captures from `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) over the string s.\n\nAs an example, the following loop will iterate over all the words from string s, printing one per line:\n```lua\n    s =\n\"hello world from Lua\"\n    for w in string.gmatch(s, \"%a+\") do\n        print(w)\n    end\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
        "name": "string.gmatch",
        "rawdesc": "\nReturns an iterator function that, each time it is called, returns the next captures from `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) over the string s.\n\nAs an example, the following loop will iterate over all the words from string s, printing one per line:\n```lua\n    s =\n\"hello world from Lua\"\n    for w in string.gmatch(s, \"%a+\") do\n        print(w)\n    end\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gmatch\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1020022,
                            "name": "s",
                            "start": 1020021,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1020031,
                            "name": "pattern",
                            "start": 1020024,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1020037,
                            "name": "repl",
                            "start": 1020033,
                            "type": "local",
                            "view": "string|number|function|table"
                        },
                        {
                            "finish": 1020040,
                            "name": "n",
                            "start": 1020039,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) have been replaced by a replacement string specified by `repl`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "finish": 1020045,
                    "rawdesc": "\nReturns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) have been replaced by a replacement string specified by `repl`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        },
                        {
                            "name": "count",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1020000,
                    "type": "function",
                    "view": "function string.gsub(s: string|number, pattern: string|number, repl: string|number|function|table, n?: integer)\n  -> string\n  2. count: integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1020020,
                "start": 1020009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) have been replaced by a replacement string specified by `repl`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
        "name": "string.gsub",
        "rawdesc": "\nReturns a copy of s in which all (or the first `n`, if given) occurrences of the `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) have been replaced by a replacement string specified by `repl`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.gsub\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1120021,
                            "name": "s",
                            "start": 1120020,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "finish": 1120026,
                    "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1120000,
                    "type": "function",
                    "view": "function string.len(s: string|number)\n  -> integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1120019,
                "start": 1120009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
        "name": "string.len",
        "rawdesc": "\nReturns its length.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.len\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1220023,
                            "name": "s",
                            "start": 1220022,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "finish": 1220028,
                    "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1220000,
                    "type": "function",
                    "view": "function string.lower(s: string|number)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1220021,
                "start": 1220009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
        "name": "string.lower",
        "rawdesc": "\nReturns a copy of this string with all uppercase letters changed to lowercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.lower\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1340023,
                            "name": "s",
                            "start": 1340022,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1340032,
                            "name": "pattern",
                            "start": 1340025,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1340038,
                            "name": "init",
                            "start": 1340034,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "finish": 1340043,
                    "rawdesc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 1340000,
                    "type": "function",
                    "view": "function string.match(s: string|number, pattern: string|number, init?: integer)\n  -> ...any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1340021,
                "start": 1340009,
                "type": "setfield"
            }
        ],
        "desc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
        "name": "string.match",
        "rawdesc": "\nLooks for the first match of `pattern` (see [ยง6.4.1](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.1\"])) in the string.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.match\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1480024,
                            "name": "fmt",
                            "start": 1480021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 1480028,
                            "name": "v1",
                            "start": 1480026,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1480032,
                            "name": "v2",
                            "start": 1480030,
                            "type": "local",
                            "view": "(string|number)?"
                        },
                        {
                            "finish": 1480037,
                            "start": 1480034,
                            "type": "...",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a binary string containing the values `v1`, `v2`, etc. packed (that is, serialized in binary form) according to the format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "finish": 1480042,
                    "rawdesc": "\nReturns a binary string containing the values `v1`, `v2`, etc. packed (that is, serialized in binary form) according to the format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
                    "returns": [
                        {
                            "name": "binary",
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1480000,
                    "type": "function",
                    "view": "function string.pack(fmt: string, v1: string|number, v2?: string|number, ...string|number)\n  -> binary: string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1480020,
                "start": 1480009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a binary string containing the values `v1`, `v2`, etc. packed (that is, serialized in binary form) according to the format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
        "name": "string.pack",
        "rawdesc": "\nReturns a binary string containing the values `v1`, `v2`, etc. packed (that is, serialized in binary form) according to the format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.pack\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1590028,
                            "name": "fmt",
                            "start": 1590025,
                            "type": "local",
                            "view": "string"
                        }
                    ],
                    "desc": "\nReturns the size of a string resulting from `string.pack` with the given format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "finish": 1590033,
                    "rawdesc": "\nReturns the size of a string resulting from `string.pack` with the given format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1590000,
                    "type": "function",
                    "view": "function string.packsize(fmt: string)\n  -> integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1590024,
                "start": 1590009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the size of a string resulting from `string.pack` with the given format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
        "name": "string.packsize",
        "rawdesc": "\nReturns the size of a string resulting from `string.pack` with the given format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.packsize\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1710021,
                            "name": "s",
                            "start": 1710020,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1710024,
                            "name": "n",
                            "start": 1710023,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 1710029,
                            "name": "sep",
                            "start": 1710026,
                            "type": "local",
                            "view": "(string|number)?"
                        }
                    ],
                    "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "finish": 1710034,
                    "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1710000,
                    "type": "function",
                    "view": "function string.rep(s: string|number, n: integer, sep?: string|number)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1710019,
                "start": 1710009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
        "name": "string.rep",
        "rawdesc": "\nReturns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.rep\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1810025,
                            "name": "s",
                            "start": 1810024,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "finish": 1810030,
                    "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1810000,
                    "type": "function",
                    "view": "function string.reverse(s: string|number)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1810023,
                "start": 1810009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
        "name": "string.reverse",
        "rawdesc": "\nReturns a string that is the string `s` reversed.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.reverse\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1930021,
                            "name": "s",
                            "start": 1930020,
                            "type": "local",
                            "view": "string|number"
                        },
                        {
                            "finish": 1930024,
                            "name": "i",
                            "start": 1930023,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 1930027,
                            "name": "j",
                            "start": 1930026,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "finish": 1930032,
                    "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 1930000,
                    "type": "function",
                    "view": "function string.sub(s: string|number, i: integer, j?: integer)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 1930019,
                "start": 1930009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
        "name": "string.sub",
        "rawdesc": "\nReturns the substring of the string that starts at `i` and continues until `j`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.sub\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2070026,
                            "name": "fmt",
                            "start": 2070023,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 2070029,
                            "name": "s",
                            "start": 2070028,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 2070034,
                            "name": "pos",
                            "start": 2070031,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the values packed in string according to the format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "finish": 2070039,
                    "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "offset",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 2070000,
                    "type": "function",
                    "view": "function string.unpack(fmt: string, s: string, pos?: integer)\n  -> ...any\n  2. offset: integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 2070022,
                "start": 2070009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the values packed in string according to the format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
        "name": "string.unpack",
        "rawdesc": "\nReturns the values packed in string according to the format string `fmt` (see [ยง6.4.2](command:extension.lua.doc?[\"en-us/54/manual.html/6.4.2\"])) .\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.unpack\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 2170023,
                            "name": "s",
                            "start": 2170022,
                            "type": "local",
                            "view": "string|number"
                        }
                    ],
                    "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "finish": 2170028,
                    "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 2170000,
                    "type": "function",
                    "view": "function string.upper(s: string|number)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/string.lua",
                "finish": 2170021,
                "start": 2170009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
        "name": "string.upper",
        "rawdesc": "\nReturns a copy of this string with all lowercase letters changed to uppercase.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.upper\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                    "finish": 80010,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
                    "start": 80008,
                    "type": "table",
                    "view": "tablelib"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 80005,
                "start": 80000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
        "name": "table",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 210026,
                            "name": "list",
                            "start": 210022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 210031,
                            "name": "sep",
                            "start": 210028,
                            "type": "local",
                            "view": "string?"
                        },
                        {
                            "finish": 210034,
                            "name": "i",
                            "start": 210033,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 210037,
                            "name": "j",
                            "start": 210036,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ยทยทยท sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "finish": 210042,
                    "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ยทยทยท sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 210000,
                    "type": "function",
                    "view": "function table.concat(list: table, sep?: string, i?: integer, j?: integer)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 210021,
                "start": 210009,
                "type": "setfield"
            }
        ],
        "desc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ยทยทยท sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
        "name": "table.concat",
        "rawdesc": "\nGiven a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ยทยทยท sep..list[j]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.concat\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1250027,
                            "name": "list",
                            "start": 1250023,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1250037,
                            "name": "callback",
                            "start": 1250029,
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "finish": 1250042,
                    "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": 1250000,
                    "type": "function",
                    "view": "function table.foreach(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1250022,
                "start": 1250009,
                "type": "setfield"
            }
        ],
        "desc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
        "name": "table.foreach",
        "rawdesc": "\nExecutes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreach\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1380028,
                            "name": "list",
                            "start": 1380024,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 1380038,
                            "name": "callback",
                            "start": 1380030,
                            "type": "local",
                            "view": "fun(key: string, value: any):<T>|nil"
                        }
                    ],
                    "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "finish": 1380043,
                    "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T>|nil"
                        }
                    ],
                    "start": 1380000,
                    "type": "function",
                    "view": "function table.foreachi(list: any, callback: fun(key: string, value: any):<T>|nil)\n  -> <T>|nil"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1380023,
                "start": 1380009,
                "type": "setfield"
            }
        ],
        "desc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
        "name": "table.foreachi",
        "rawdesc": "\nExecutes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.foreachi\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1510024,
                            "name": "list",
                            "start": 1510020,
                            "type": "local",
                            "view": "<T>[]"
                        }
                    ],
                    "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "finish": 1510029,
                    "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 1510000,
                    "type": "function",
                    "view": "function table.getn(list: <T>[])\n  -> integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1510019,
                "start": 1510009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
        "name": "table.getn",
        "rawdesc": "\nReturns the number of elements in the table. This function is equivalent to `#list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.getn\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 320026,
                            "name": "list",
                            "start": 320022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 320031,
                            "name": "pos",
                            "start": 320028,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 320038,
                            "name": "value",
                            "start": 320033,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "finish": 320043,
                    "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
                    "start": 320000,
                    "type": "function",
                    "view": "function table.insert(list: table, pos: integer, value: any)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 320021,
                "start": 320009,
                "type": "setfield"
            }
        ],
        "desc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
        "name": "table.insert",
        "rawdesc": "\nInserts element `value` at position `pos` in `list`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.insert\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 430025,
                            "name": "table",
                            "start": 430020,
                            "type": "local",
                            "view": "table"
                        }
                    ],
                    "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "finish": 430030,
                    "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 430000,
                    "type": "function",
                    "view": "function table.maxn(table: table)\n  -> integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 430019,
                "start": 430009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
        "name": "table.maxn",
        "rawdesc": "\nReturns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.maxn\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 630022,
                            "name": "a1",
                            "start": 630020,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 630025,
                            "name": "f",
                            "start": 630024,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 630028,
                            "name": "e",
                            "start": 630027,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 630031,
                            "name": "t",
                            "start": 630030,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 630035,
                            "name": "a2",
                            "start": 630033,
                            "type": "local",
                            "view": "table?"
                        }
                    ],
                    "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],ยทยทยท =\na1[f],ยทยทยท,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "finish": 630040,
                    "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],ยทยทยท =\na1[f],ยทยทยท,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
                    "returns": [
                        {
                            "name": "a2",
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 630000,
                    "type": "function",
                    "view": "function table.move(a1: table, f: integer, e: integer, t: integer, a2?: table)\n  -> a2: table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 630019,
                "start": 630009,
                "type": "setfield"
            }
        ],
        "desc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],ยทยทยท =\na1[f],ยทยทยท,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
        "name": "table.move",
        "rawdesc": "\nMoves elements from table `a1` to table `a2`.\n```lua\na2[t],ยทยทยท =\na1[f],ยทยทยท,a1[e]\nreturn a2\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.move\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 730023,
                            "start": 730020,
                            "type": "...",
                            "view": "unknown"
                        }
                    ],
                    "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "finish": 730028,
                    "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "table"
                        }
                    ],
                    "start": 730000,
                    "type": "function",
                    "view": "function table.pack(...any)\n  -> table"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 730019,
                "start": 730009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
        "name": "table.pack",
        "rawdesc": "\nReturns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `\"n\"` with the total number of arguments.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.pack\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 830026,
                            "name": "list",
                            "start": 830022,
                            "type": "local",
                            "view": "table"
                        },
                        {
                            "finish": 830031,
                            "name": "pos",
                            "start": 830028,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "finish": 830036,
                    "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 830000,
                    "type": "function",
                    "view": "function table.remove(list: table, pos?: integer)\n  -> any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 830021,
                "start": 830009,
                "type": "setfield"
            }
        ],
        "desc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
        "name": "table.remove",
        "rawdesc": "\nRemoves from `list` the element at position `pos`, returning the value of the removed element.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.remove\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 930024,
                            "name": "list",
                            "start": 930020,
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": 930030,
                            "name": "comp",
                            "start": 930026,
                            "type": "local",
                            "view": "(fun(a: <T>, b: <T>):boolean)?"
                        }
                    ],
                    "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "finish": 930035,
                    "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
                    "start": 930000,
                    "type": "function",
                    "view": "function table.sort(list: <T>[], comp?: fun(a: <T>, b: <T>):boolean)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 930019,
                "start": 930009,
                "type": "setfield"
            }
        ],
        "desc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
        "name": "table.sort",
        "rawdesc": "\nSorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.sort\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 1120026,
                            "name": "list",
                            "start": 1120022,
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": 1120029,
                            "name": "i",
                            "start": 1120028,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 1120032,
                            "name": "j",
                            "start": 1120031,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "finish": 1120037,
                    "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 1120000,
                    "type": "function",
                    "view": "function table.unpack(list: <T>[], i?: integer, j?: integer)\n  -> ...<T>"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/table.lua",
                "finish": 1120021,
                "start": 1120009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
        "name": "table.unpack",
        "rawdesc": "\nReturns the elements from the given list. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\nBy default, `i` is `1` and `j` is `#list`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-table.unpack\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3610019,
                            "name": "e",
                            "start": 3610018,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [ยง3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                    "finish": 3610024,
                    "rawdesc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [ยง3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "number?"
                        }
                    ],
                    "start": 3610000,
                    "type": "function",
                    "view": "function tonumber(e: any)\n  -> number?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3610017,
                "start": 3610009,
                "type": "setglobal"
            }
        ],
        "desc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [ยง3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
        "name": "tonumber",
        "rawdesc": "\nWhen called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.\n\nThe conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [ยง3.1](command:extension.lua.doc?[\"en-us/54/manual.html/3.1\"])). The string may have leading and trailing spaces and a sign.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tonumber\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3760019,
                            "name": "v",
                            "start": 3760018,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                    "finish": 3760024,
                    "rawdesc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 3760000,
                    "type": "function",
                    "view": "function tostring(v: any)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3760017,
                "start": 3760009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
        "name": "tostring",
        "rawdesc": "\nReceives a value of any type and converts it to a string in a human-readable format.\n\nIf the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.\n\nFor complete control of how numbers are converted, use [string.format](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-string.format\"]).\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-tostring\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 3970015,
                            "name": "v",
                            "start": 3970014,
                            "type": "local",
                            "view": "any"
                        }
                    ],
                    "desc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                    "finish": 3970020,
                    "rawdesc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
                    "returns": [
                        {
                            "name": "type",
                            "type": "function.return",
                            "view": "\"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
                        }
                    ],
                    "start": 3970000,
                    "type": "function",
                    "view": "function type(v: any)\n  -> type: \"boolean\"|\"function\"|\"nil\"|\"number\"|\"string\"...(+3)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 3970013,
                "start": 3970009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
        "name": "type",
        "rawdesc": "\nReturns the type of its only argument, coded as a string. The possible results of this function are `\"nil\"` (a string, not the value `nil`), `\"number\"`, `\"string\"`, `\"boolean\"`, `\"table\"`, `\"function\"`, `\"thread\"`, and `\"userdata\"`.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-type\"])\n\n\n```lua\ntype:\n    | \"nil\"\n    | \"number\"\n    | \"string\"\n    | \"boolean\"\n    | \"table\"\n    | \"function\"\n    | \"thread\"\n    | \"userdata\"\n```",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4460020,
                            "name": "list",
                            "start": 4460016,
                            "type": "local",
                            "view": "<T>[]"
                        },
                        {
                            "finish": 4460023,
                            "name": "i",
                            "start": 4460022,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 4460026,
                            "name": "j",
                            "start": 4460025,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                    "finish": 4460031,
                    "rawdesc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
                    "returns": [
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "<T>"
                        }
                    ],
                    "start": 4460000,
                    "type": "function",
                    "view": "function unpack(list: <T>[], i?: integer, j?: integer)\n  -> ...<T>"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4460015,
                "start": 4460009,
                "type": "setglobal"
            },
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4530020,
                            "name": "list",
                            "start": 4530016,
                            "type": "local",
                            "view": "{ [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9> }"
                        }
                    ],
                    "finish": 4530025,
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "<T1>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T2>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T3>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T4>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T5>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T6>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T7>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T8>"
                        },
                        {
                            "type": "function.return",
                            "view": "<T9>"
                        }
                    ],
                    "start": 4530000,
                    "type": "function",
                    "view": "function unpack(list: { [1]: <T1>, [2]: <T2>, [3]: <T3>, [4]: <T4>, [5]: <T5>, [6]: <T6>, [7]: <T7>, [8]: <T8>, [9]: <T9> })\n  -> <T1>\n  2. <T2>\n  3. <T3>\n  4. <T4>\n  5. <T5>\n  6. <T6>\n  7. <T7>\n  8. <T8>\n  9. <T9>"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4530015,
                "start": 4530009,
                "type": "setglobal"
            }
        ],
        "desc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
        "name": "unpack",
        "rawdesc": "\nReturns the elements from the given `list`. This function is equivalent to\n```lua\n    return list[i], list[i+1], ยทยทยท, list[j]\n```\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-unpack\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
                    "finish": 150009,
                    "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
                    "start": 150007,
                    "type": "table",
                    "view": "utf8lib"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 150004,
                "start": 150000,
                "type": "setglobal"
            }
        ],
        "desc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
        "name": "utf8",
        "rawdesc": "\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8\"])\n",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 260023,
                            "name": "code",
                            "start": 260019,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 260028,
                            "start": 260025,
                            "type": "...",
                            "view": "integer"
                        }
                    ],
                    "desc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                    "finish": 260033,
                    "rawdesc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "string"
                        }
                    ],
                    "start": 260000,
                    "type": "function",
                    "view": "function utf8.char(code: integer, ...integer)\n  -> string"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 260018,
                "start": 260009,
                "type": "setfield"
            }
        ],
        "desc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
        "name": "utf8.char",
        "rawdesc": "\nReceives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.char\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 570025,
                            "name": "s",
                            "start": 570024,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 570028,
                            "name": "i",
                            "start": 570027,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 570031,
                            "name": "j",
                            "start": 570030,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 570036,
                            "name": "lax",
                            "start": 570033,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                    "finish": 570041,
                    "rawdesc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
                    "returns": [
                        {
                            "name": "code",
                            "type": "function.return",
                            "view": "integer"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 570000,
                    "type": "function",
                    "view": "function utf8.codepoint(s: string, i?: integer, j?: integer, lax?: boolean)\n  -> code: integer\n  2. ...integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 570023,
                "start": 570009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
        "name": "utf8.codepoint",
        "rawdesc": "\nReturns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codepoint\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 430021,
                            "name": "s",
                            "start": 430020,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 430026,
                            "name": "lax",
                            "start": 430023,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                    "finish": 430031,
                    "rawdesc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "fun(s: string, p: integer):integer, integer"
                        }
                    ],
                    "start": 430000,
                    "type": "function",
                    "view": "function utf8.codes(s: string, lax?: boolean)\n  -> fun(s: string, p: integer):integer, integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 430019,
                "start": 430009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
        "name": "utf8.codes",
        "rawdesc": "\nReturns values so that the construction\n```lua\nfor p, c in utf8.codes(s) do\n    body\nend\n```\nwill iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.\n\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.codes\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 710019,
                            "name": "s",
                            "start": 710018,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 710022,
                            "name": "i",
                            "start": 710021,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 710025,
                            "name": "j",
                            "start": 710024,
                            "type": "local",
                            "view": "integer?"
                        },
                        {
                            "finish": 710030,
                            "name": "lax",
                            "start": 710027,
                            "type": "local",
                            "view": "boolean?"
                        }
                    ],
                    "desc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                    "finish": 710035,
                    "rawdesc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
                    "returns": [
                        {
                            "type": "function.return",
                            "view": "integer?"
                        },
                        {
                            "name": "errpos",
                            "type": "function.return",
                            "view": "integer?"
                        }
                    ],
                    "start": 710000,
                    "type": "function",
                    "view": "function utf8.len(s: string, i?: integer, j?: integer, lax?: boolean)\n  -> integer?\n  2. errpos: integer?"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 710017,
                "start": 710009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
        "name": "utf8.len",
        "rawdesc": "\nReturns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.len\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 830022,
                            "name": "s",
                            "start": 830021,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 830025,
                            "name": "n",
                            "start": 830024,
                            "type": "local",
                            "view": "integer"
                        },
                        {
                            "finish": 830028,
                            "name": "i",
                            "start": 830027,
                            "type": "local",
                            "view": "integer?"
                        }
                    ],
                    "desc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                    "finish": 830033,
                    "rawdesc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
                    "returns": [
                        {
                            "name": "p",
                            "type": "function.return",
                            "view": "integer"
                        }
                    ],
                    "start": 830000,
                    "type": "function",
                    "view": "function utf8.offset(s: string, n: integer, i?: integer)\n  -> p: integer"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/utf8.lua",
                "finish": 830020,
                "start": 830009,
                "type": "setfield"
            }
        ],
        "desc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
        "name": "utf8.offset",
        "rawdesc": "\nReturns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-utf8.offset\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4140021,
                            "name": "message",
                            "start": 4140014,
                            "type": "local",
                            "view": "string"
                        },
                        {
                            "finish": 4140026,
                            "start": 4140023,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                    "finish": 4140031,
                    "rawdesc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
                    "start": 4140000,
                    "type": "function",
                    "view": "function warn(message: string, ...any)"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4140013,
                "start": 4140009,
                "type": "setglobal"
            }
        ],
        "desc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
        "name": "warn",
        "rawdesc": "\nEmits a warning with a message composed by the concatenation of all its arguments (which should be strings).\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-warn\"])",
        "type": "variable"
    },
    {
        "defines": [
            {
                "extends": {
                    "args": [
                        {
                            "finish": 4280017,
                            "name": "f",
                            "start": 4280016,
                            "type": "local",
                            "view": "fun(...any):...unknown"
                        },
                        {
                            "finish": 4280023,
                            "name": "msgh",
                            "start": 4280019,
                            "type": "local",
                            "view": "function"
                        },
                        {
                            "finish": 4280029,
                            "name": "arg1",
                            "start": 4280025,
                            "type": "local",
                            "view": "any"
                        },
                        {
                            "finish": 4280034,
                            "start": 4280031,
                            "type": "...",
                            "view": "any"
                        }
                    ],
                    "desc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                    "finish": 4280039,
                    "rawdesc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
                    "returns": [
                        {
                            "name": "success",
                            "type": "function.return",
                            "view": "boolean"
                        },
                        {
                            "name": "result",
                            "type": "function.return",
                            "view": "any"
                        },
                        {
                            "name": "...",
                            "type": "function.return",
                            "view": "any"
                        }
                    ],
                    "start": 4280000,
                    "type": "function",
                    "view": "function xpcall(f: fun(...any):...unknown, msgh: function, arg1?: any, ...any)\n  -> success: boolean\n  2. result: any\n  3. ...any"
                },
                "file": "file:///Users/insality/.cache/lua-language-server/meta/Lua%205.4%20en-us%20utf8/basic.lua",
                "finish": 4280015,
                "start": 4280009,
                "type": "setglobal"
            }
        ],
        "desc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
        "name": "xpcall",
        "rawdesc": "\nCalls function `f` with the given arguments in protected mode with a new message handler.\n\n[View documents](command:extension.lua.doc?[\"en-us/54/manual.html/pdf-xpcall\"])",
        "type": "variable"
    }
]